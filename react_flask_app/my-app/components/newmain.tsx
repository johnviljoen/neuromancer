"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/KXbYVG69jUt
 */


import { DropdownMenuTrigger, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuItem, DropdownMenuContent, DropdownMenu } from "@/components/ui/dropdown-menu"
import DraggableSquare from '@/components/ui/draggablesquare';
import { Link } from 'react-router-dom';
import { ReactFlowProvider } from 'reactflow';


import React, { useState, useEffect } from 'react';

import { Button } from "@/components/ui/button";
import { DatasetCreatorPage } from '@/dataset_page/ui/datasetcreator';
import EnvironmentPane from "@/components/environment_pane";
import Canvas from "@/components/newcanvas";
import DebugWindow from "@/components/debugwindow";
// import BlocksContainer from "@/components/blocks";
import TrashCan from '@/components/ui/trashcan';
import IntegratorsContainer from '@/components/integratorscontainer';
import {DndContext, DragEndEvent} from "@dnd-kit/core"

// Define BlockInfo type
type BlockInfo = {
  id: string;
  name: string;
  x: number;
  y: number;
};




const nodes = [
    { id: '1', type: 'default', data: { label: 'Node 1' }, position: { x: 100, y: 100 } },
    { id: '2', type: 'default', data: { label: 'Node 2' }, position: { x: 300, y: 100 } },
  ];


export function Main() {
  const [elements, setElements] = useState([]);
  const [canvasMap, setCanvasMap] = useState<Map<string, BlockInfo>>(new Map());
  const [droppedItemId, setDroppedItemId] = useState<string | null>(null);
  

  function handleDragEnd(event: any) {
    if (event.over) {
      let newElements: any = [...elements, ...[event.active.data.current]];
      setElements(newElements);
    }

  }


  const getBlockInformation = (e: DragEndEvent) => {
    
    const id = e.active.id;
    setDroppedItemId(id);
    console.log(e.active.id)
    const name = e.active.data.current.name; 
    const delta_x = e.delta.x ; 
    const delta_y = e.delta.y; 
    const tailwindClassName = e.active.data.current.tailwindClassName;

    
    setCanvasMap((prevCanvasMap) => {
      const updatedCanvasMap = new Map(prevCanvasMap);
      const existingBlockInfo = updatedCanvasMap.get(id);
  
      if (existingBlockInfo) {
        // If the block info exists, update its x and y
        existingBlockInfo.x += delta_x;
        existingBlockInfo.y += delta_y;
      } else {
        // If the block info doesn't exist, create a new one
        const newBlockInfo: BlockInfo = {
          id,
          name,
          x:delta_x,
          y:e.delta_y,
          tailwindClassName: tailwindClassName
        };
        updatedCanvasMap.set(id, newBlockInfo);
      }


      return updatedCanvasMap;
    });
  };




  return (  
    
    <DndContext onDragEnd={getBlockInformation}>
      <div className="flex h-screen w-full flex-col">
        <header className="flex h-14 lg:h-[60px] items-center gap-4 border-b bg-gray-900 px-6 dark:bg-gray-950" style={{ backgroundColor: "navy" }}>
          <Button className="lg:hidden" size="icon" variant="outline">
            <Package2Icon className="h-6 w-6 text-black" />
            <span className="sr-only">Home</span>
          </Button>
          <nav className="hidden lg:flex h-8 w-full shrink-0 items-center gap-4 text-sm font-medium lg:gap-8 lg:text-base" />
          <div className="relative">
            <Button className="rounded-full border border-gray-200 w-8 h-8 dark:border-gray-800" size="icon" variant="ghost">
              <img
                alt="Avatar"
                className="rounded-full"
                height="32"
                src="/placeholder.svg"
                style={{ aspectRatio: "32/32", objectFit: "cover" }}
                width="32"
              />
              <span className="sr-only">Toggle user menu</span>
            </Button>
          </div>
        </header>
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
          <div className="flex h-full items-center justify-center border-dashed border-2 border-gray-200/50 border-gray-200/50 rounded-lg dark:border-gray-800/50">
            <div className="flex items-center justify-center w-full h-full bg-gray-100 dark:bg-gray-800">
              <div className="flex items-center justify-center w-3/4 h-3/4 bg-white dark:bg-gray-900 rounded-lg shadow-lg">
              <div className="flex items-center justify-center w-1/4 h-full bg-gray-200 dark:bg-gray-700 rounded-l-lg">
                <h2 className="text-lg font-semibold text-black">BlocksContainer</h2>
                  <div className="Neuromancer_Components_Container">
                      <DraggableSquare name="MLP" xpos={0} ypos={0} tailwindClassName="w-12 h-12 bg-blue-500 m-2 flex items-center justify-center rounded"/>
                      <DraggableSquare name="ResNet" xpos={0} ypos={100}  tailwindClassName="w-12 h-12 bg-blue-500 m-2 flex items-center justify-center rounded"/>
                      <DraggableSquare name="Linear" xpos={0} ypos={200}  tailwindClassName="w-12 h-12 bg-blue-500 m-2 flex items-center justify-center rounded"/>
                    </div>
                  </div>
                  <div style={{ margin: '10px 10px' }} /> {/* Spacer with 10px margin */}
                  
                <Canvas/>
              </div>
            </div>
          </div>
        </main>
        <Link to="/dataset-creator">Go to Dataset Creator</Link>
      </div>
    </DndContext>

 
  );
}


function Package2Icon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z" />
      <path d="m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9" />
      <path d="M12 3v6" />
    </svg>
  );
}

function BellIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9" />
      <path d="M10.3 21a1.94 1.94 0 0 0 3.4 0" />
    </svg>
  );
}