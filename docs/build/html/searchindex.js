Search.setIndex({"docnames": ["activations", "arg", "blocks", "bounds", "callbacks", "component", "constraint", "dataset", "dynamics", "estimators", "gnn", "gradients", "index", "integrators", "interpolation", "loggers", "loss", "maps", "modules", "neuromancer", "neuromancer.dynamics", "neuromancer.modules", "neuromancer.psl", "neuromancer.slim", "neuromancer.slim.butterfly", "ode", "operators", "physics", "plot", "problem", "pwa_maps", "readme_rst", "rnn", "simulator", "simulators", "solvers", "trainer", "visuals"], "filenames": ["activations.rst", "arg.rst", "blocks.rst", "bounds.rst", "callbacks.rst", "component.rst", "constraint.rst", "dataset.rst", "dynamics.rst", "estimators.rst", "gnn.rst", "gradients.rst", "index.rst", "integrators.rst", "interpolation.rst", "loggers.rst", "loss.rst", "maps.rst", "modules.rst", "neuromancer.rst", "neuromancer.dynamics.rst", "neuromancer.modules.rst", "neuromancer.psl.rst", "neuromancer.slim.rst", "neuromancer.slim.butterfly.rst", "ode.rst", "operators.rst", "physics.rst", "plot.rst", "problem.rst", "pwa_maps.rst", "readme_rst.rst", "rnn.rst", "simulator.rst", "simulators.rst", "solvers.rst", "trainer.rst", "visuals.rst"], "titles": ["Activations", "Arg", "Blocks", "Bounds", "Callbacks", "Component", "Constraint", "Dataset", "Dynamics", "Estimators", "GNN", "Gradients", "NeuroMANCER", "Integrators", "Interpolation", "Loggers", "Loss", "Maps", "neuromancer", "neuromancer package", "neuromancer.dynamics package", "neuromancer.modules package", "neuromancer.psl package", "neuromancer.slim package", "neuromancer.slim.butterfly package", "ODE", "Operators", "Physics", "Plot", "Problem", "PWA Maps", "Readme File", "RNN", "Simulator", "Simulators", "Solvers", "Trainer", "Visuals"], "terms": {"elementwis": [0, 21], "nonlinear": [0, 12, 20, 21, 22, 23], "tensor": [0, 6, 7, 11, 15, 16, 19, 20, 21, 22, 23, 24], "oper": [0, 6, 12, 19, 21, 22, 23, 24], "thi": [1, 6, 7, 12, 16, 19, 20, 21, 22, 23, 24, 36], "modul": [1, 2, 12, 15, 16, 29], "contain": [1, 6, 19, 20, 22, 23], "an": [1, 6, 12, 19, 20, 22, 24], "extens": [1, 12, 19, 36], "argpars": [1, 12, 15, 19], "argumentpars": [1, 15, 19], "class": [1, 4, 6, 7, 12, 15, 16, 19, 20, 21, 22, 23, 24, 36], "some": [1, 6, 7, 12, 19, 20, 21, 22], "parser": [1, 19], "ar": [1, 6, 7, 12, 16, 19, 20, 22, 23, 24], "gener": [1, 2, 7, 19, 20, 21, 22, 23], "us": [1, 6, 7, 12, 19, 20, 21, 22, 23, 24, 36], "write": [1, 19], "train": [1, 7, 12, 15, 19, 22, 23, 36], "script": [1, 12, 19], "neuromanc": [1, 4, 6, 7, 11, 15, 16, 29, 36], "librari": [1, 12, 19], "i": [1, 6, 7, 12, 19, 20, 21, 22, 23, 24, 36], "extend": [1, 19, 24], "take": [1, 6, 16, 19, 20, 21, 22, 23], "advantag": [1, 19], "group": [1, 12, 19], "argument": [1, 19, 22, 24], "when": [1, 6, 19, 22], "pass": [1, 6, 16, 19, 20, 21, 22, 23, 24], "command": [1, 19], "line": [1, 12, 19, 24], "function": [1, 2, 4, 6, 7, 11, 12, 16, 19, 20, 22, 23, 24], "abbrevi": [1, 19], "": [1, 6, 7, 19, 21, 22, 24], "verbos": [1, 15, 19], "method": [1, 6, 12, 16, 19, 20, 21, 22, 23, 24, 36], "name": [1, 6, 7, 12, 19, 21, 22], "prefix": [1, 19, 22], "kwarg": [1, 19, 22, 23, 24], "sourc": [1, 4, 6, 7, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 36], "subclass": [1, 16, 19, 20, 21, 22, 23, 24], "call": [1, 6, 16, 19, 20, 21, 22, 23], "separ": [1, 19, 22, 24], "namespac": [1, 15, 19], "option": [1, 6, 7, 19, 22, 23], "so": [1, 12, 19, 21, 22, 23, 24], "we": [1, 12, 19, 20, 22, 23, 24], "can": [1, 6, 7, 12, 19, 20, 22, 23, 24], "reus": [1, 19], "definit": [1, 6, 19, 21, 23], "check_for_group": [1, 12, 19], "group_nam": [1, 19], "return": [1, 6, 7, 11, 15, 16, 19, 20, 21, 22, 23, 24], "exist": [1, 19], "paramet": [1, 6, 7, 12, 15, 16, 19, 20, 21, 22, 23, 24], "str": [1, 6, 7, 15, 16, 19, 21, 22], "_argumentgroup": [1, 19], "none": [1, 6, 7, 11, 15, 19, 20, 21, 22, 23, 24, 36], "monkei": [1, 19], "patch": [1, 19], "add_argument_group": [1, 19], "If": [1, 7, 12, 19, 22, 24], "otherwis": [1, 19, 20], "new": [1, 6, 12, 19], "creat": [1, 6, 7, 12, 15, 16, 19], "parse_arg_group": [1, 12, 19], "list": [1, 6, 7, 16, 19, 21, 22], "add": [1, 6, 7, 12, 19], "self": [1, 6, 16, 19, 24, 36], "argnam": [1, 19], "object": [1, 4, 6, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 36], "refer": [1, 16, 19, 21, 22, 23], "instanti": [1, 6, 19], "being": [1, 6, 19], "whatev": [1, 19], "keyword": [1, 19], "thing": [1, 19], "accept": [1, 19, 22, 24], "add_argu": [1, 19], "think": [1, 12, 19], "action": [1, 19, 20, 22], "ctrl_loss": [1, 12, 19], "special": [1, 19], "control": [1, 2, 12, 19, 20, 21, 22], "loss": [1, 6, 12, 23], "resolv": [1, 19], "conflict": [1, 19], "multipl": [1, 6, 19, 20, 21, 23, 24], "bundl": [1, 19], "parent": [1, 19], "A": [1, 6, 12, 19, 22, 23, 24], "data": [1, 7, 12, 19, 21, 22, 24, 36], "system": [1, 12, 15, 20, 22], "cstr": [1, 19, 22], "freez": [1, 12, 19], "weight": [1, 6, 12, 19, 23, 24], "lin": [1, 12, 19], "linear": [1, 12, 19, 21, 22, 24], "map": [1, 12, 19, 20, 21, 23], "log": [1, 12, 16, 19, 24], "opt": [1, 12, 19, 22, 29], "optim": [1, 12, 19, 22, 36], "polici": [1, 2, 12, 19, 21], "ssm": [1, 12, 19, 20], "state": [1, 2, 12, 19, 20, 21, 22, 23], "space": [1, 2, 12, 19, 20, 21, 22, 23], "model": [1, 2, 7, 12, 15, 19, 20, 21, 22, 23, 36], "approxim": [2, 21, 23], "variou": [2, 19, 21], "degre": [2, 21], "which": [2, 4, 6, 7, 19, 20, 21, 22, 23], "implement": [2, 12, 19, 20, 21, 22, 23, 24], "consist": [2, 21], "interfac": [2, 12, 21, 22, 23], "neural": [2, 12, 19, 20, 21, 23], "network": [2, 12, 19, 20, 21, 22, 23], "build": [2, 6, 12, 19, 21, 22], "estim": [2, 12, 21], "versatil": [4, 12, 19], "behavior": [4, 6, 19], "trainer": [4, 7, 12], "specifi": [4, 19], "checkpoint": [4, 19], "base": [4, 12, 19, 20, 21, 23, 24], "allow": [4, 6, 12, 19, 22, 23], "bare": [4, 19], "begin_epoch": [4, 12, 19], "output": [4, 11, 15, 19, 21, 22, 23, 24], "begin_ev": [4, 12, 19], "begin_test": [4, 12, 19], "begin_train": [4, 12, 19], "end_batch": [4, 12, 19], "end_epoch": [4, 12, 19], "end_ev": [4, 12, 19], "end_test": [4, 12, 19], "end_train": [4, 12, 19], "conjunct": [6, 19], "variabl": [6, 11, 12, 19, 20, 21, 22], "ha": [6, 19, 20, 22, 24], "same": [6, 19, 21, 22, 23, 24], "intuit": [6, 19], "syntax": [6, 12, 19], "defin": [6, 16, 19, 20, 21, 22, 23, 24], "via": [6, 7, 12, 16, 19, 21, 22, 23], "left": [6, 19, 23], "right": [6, 19, 23], "compar": [6, 12, 19], "1": [6, 7, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 36], "0": [6, 7, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 36], "drop": [6, 19, 23], "replac": [6, 19, 23], "construct": [6, 12, 19, 20], "composit": [6, 19], "infix": [6, 19], "compon": [6, 11, 12, 19], "determin": [6, 19, 20], "l": [6, 12, 19, 22], "norm": [6, 7, 12, 19, 23], "violat": [6, 16, 19, 21], "forward": [6, 12, 16, 19, 20, 21, 22, 23, 24], "input_dict": [6, 16, 19, 21], "dict": [6, 7, 15, 16, 19, 21, 22], "torch": [6, 7, 15, 16, 19, 20, 21, 22, 23, 24, 36], "should": [6, 12, 16, 19, 20, 21, 22, 24], "kei": [6, 7, 12, 19, 22], "correspond": [6, 19, 22, 24], "variable_nam": [6, 12, 19], "dimension": [6, 19, 23], "cast": [6, 19, 22], "float": [6, 7, 19, 21, 22, 23, 24], "point": [6, 19, 22], "number": [6, 7, 15, 19, 21, 22, 23, 24], "grad": [6, 12, 19, 22, 24], "input_kei": [6, 12, 19, 21], "gradient": [6, 12, 21, 22, 23, 24], "w": [6, 12, 19, 20, 21, 23, 24], "r": [6, 12, 19, 20, 21, 22, 24], "t": [6, 12, 19, 20, 21, 22, 23, 24], "input": [6, 11, 12, 19, 20, 21, 22, 23, 24], "respect": [6, 19, 23, 24], "update_nam": [6, 12, 19], "properti": [6, 19, 21, 22, 23], "eq": [6, 12, 19, 23], "equal": [6, 19, 23], "penal": [6, 19], "differ": [6, 19, 20, 22, 23], "between": [6, 19, 20, 21, 22, 23, 24], "hand": [6, 19], "side": [6, 19, 20], "calcul": [6, 16, 19, 20, 21], "g": [6, 7, 19, 20, 21, 22, 24], "x": [6, 7, 11, 12, 19, 20, 21, 22, 23, 24], "b": [6, 19, 22, 23], "valu": [6, 7, 12, 16, 19, 20, 21, 22, 23, 24], "penalti": [6, 16, 19, 21, 23], "mean": [6, 7, 19, 22], "zero": [6, 7, 19, 20], "gt": [6, 12, 19], "greater": [6, 19], "than": [6, 7, 19], "lower": [6, 19, 22], "bound": [6, 19, 21, 22, 23], "relu": [6, 19, 21, 23], "lt": [6, 12, 19], "less": [6, 19], "upper": [6, 19, 22, 23], "callabl": [6, 19], "reli": [6, 19], "dictionari": [6, 7, 16, 19, 21, 22], "string": [6, 19, 24], "var": [6, 19], "metric": [6, 15, 19], "built": [6, 19, 22, 23], "type": [6, 7, 19, 21, 22, 23, 24], "evalu": [6, 12, 19, 36], "input_vari": [6, 19], "func": [6, 12, 19], "display_nam": [6, 12, 19], "abstract": [6, 16, 19, 20, 21, 22, 23], "nice": [6, 19], "syntact": [6, 19], "sugar": [6, 19], "given": [6, 7, 19, 21, 22, 24], "pytorch": [6, 7, 12, 19, 22, 23, 24, 36], "subject": [6, 19], "comparison": [6, 19], "mathemat": [6, 12, 19], "perform": [6, 16, 19, 20, 21, 22], "sequenc": [6, 7, 19, 21, 22, 23], "support": [6, 11, 12, 16, 19, 22, 24], "numer": [6, 19, 22], "check_kei": [6, 12, 19], "k": [6, 19, 21, 22, 23], "datadict": [6, 7, 19, 21], "goe": [6, 19], "through": [6, 12, 19, 23, 36], "topolog": [6, 19], "sort": [6, 19], "node": [6, 12, 19], "retriev": [6, 19, 22, 24], "graph": [6, 7, 12, 19, 22], "from": [6, 7, 12, 15, 16, 19, 20, 21, 22, 23, 24, 29], "comput": [6, 7, 11, 12, 16, 19, 20, 21, 22, 23, 24], "get_valu": [6, 12, 19], "n": [6, 7, 19, 21, 22, 23, 24], "other": [6, 19, 22, 24], "Will": [6, 15, 19, 22], "provid": [6, 7, 12, 19], "__init__": [6, 19, 22], "intend": [6, 19, 24], "mt": [6, 12, 19], "make_graph": [6, 12, 19], "compos": [6, 12, 19, 20], "constitu": [6, 19], "It": [6, 19, 20, 22, 24], "first": [6, 19, 20, 22, 24], "empti": [6, 19], "itself": [6, 19], "Then": [6, 19], "them": [6, 16, 19, 20, 21, 22, 24], "thei": [6, 19, 22, 24], "alreadi": [6, 19], "combin": [6, 19, 21, 24], "all": [6, 16, 19, 20, 21, 22, 23, 24, 36], "union": [6, 19], "set": [6, 7, 12, 19, 21, 22, 24], "edg": [6, 19, 22], "In": [6, 12, 19, 23, 24], "penultim": [6, 19], "step": [6, 7, 12, 15, 19, 20, 21, 22], "ad": [6, 19], "care": [6, 16, 19, 20, 21, 22], "shallow": [6, 19], "copi": [6, 19], "more": [6, 7, 12, 19, 20, 24], "one": [6, 7, 16, 19, 20, 21, 22], "final": [6, 19, 21, 23], "swift": [6, 19], "direct": [6, 12, 19], "acycl": [6, 19], "arbitrari": [6, 7, 19, 20, 21, 22, 23, 24], "_func": [6, 19], "minim": [6, 12, 19, 22], "show": [6, 12, 19, 22], "fignam": [6, 19, 22], "plot": [6, 12], "save": [6, 19, 22, 24], "figur": [6, 19, 22], "unpack": [6, 12, 19], "result": [6, 19, 21, 22, 24], "linalg": [6, 19], "svd": [6, 19, 23], "nret": [6, 19], "int": [6, 7, 15, 19, 22, 23, 24], "each": [6, 19, 20, 22, 23, 24], "For": [6, 12, 19, 21, 22], "trainabl": [6, 19], "0dim": [6, 19], "std": [6, 7, 19, 23], "normal": [6, 7, 19, 22, 23], "dist": [6, 19], "__repr__": [6, 19], "nn": [6, 7, 15, 19, 20, 21, 23, 24], "requires_grad": [6, 19, 20, 22], "true": [6, 7, 11, 19, 20, 21, 22, 23, 24], "dictdataset": [7, 12, 19], "basic": [7, 12, 19], "compat": [7, 12, 19, 22, 23, 24], "collate_fn": [7, 12, 19], "batch": [7, 19, 21, 23, 24, 36], "wrap": [7, 19, 21], "default": [7, 19, 22, 24], "collat": [7, 19], "field": [7, 19], "sampl": [7, 12, 19, 21, 22, 23], "graphdataset": [7, 12, 19], "node_attr": [7, 19], "edge_attr": [7, 19], "graph_attr": [7, 19], "metadata": [7, 19], "seq_len": [7, 19, 21, 23], "6": [7, 12, 19, 22], "seq_horizon": [7, 19], "seq_strid": [7, 19], "build_graph": [7, 12, 19], "connectivity_radiu": [7, 19], "015": [7, 19], "graph_self_loop": [7, 19], "featur": [7, 19, 21], "self_loop": [7, 19], "try": [7, 19], "torch_geometr": [7, 19], "import": [7, 12, 19, 23], "radius_graph": [7, 19], "except": [7, 19], "static": [7, 19, 22, 23, 24], "doe": [7, 12, 19, 22, 24], "light": [7, 19], "post": [7, 19], "process": [7, 12, 19], "transpos": [7, 19, 23], "requir": [7, 19, 24], "edge_index": [7, 19], "make_map": [7, 12, 19], "order": [7, 19, 20, 21, 22, 24], "shuffl": [7, 12, 19], "random": [7, 19, 22, 23], "sequencedataset": [7, 12, 19], "nstep": [7, 19, 20, 21, 24], "moving_horizon": [7, 19], "fals": [7, 19, 20, 21, 22, 23, 24, 36], "get_full_batch": [7, 12, 19], "get_full_sequ": [7, 12, 19], "staticdataset": [7, 12, 19], "simpli": [7, 19], "batch_tensor": [7, 12, 19], "mh": [7, 19], "bool": [7, 19, 22], "denormalize_01": [7, 12, 19], "m": [7, 19, 22, 24], "mmin": [7, 19], "mmax": [7, 19], "denorm": [7, 19, 22], "min": [7, 19, 21, 22, 36], "max": [7, 19, 21, 22, 23], "param": [7, 11, 19, 21, 22, 23, 24], "2": [7, 16, 19, 20, 21, 22, 23, 24], "d": [7, 12, 19, 20, 21, 22], "np": [7, 19, 22], "arrai": [7, 19, 22, 24], "minimum": [7, 19, 22, 23], "maximum": [7, 19, 22, 23], "un": [7, 19], "denormalize_11": [7, 12, 19], "destandard": [7, 12, 19], "get_sequence_dataload": [7, 12, 19], "norm_typ": [7, 19], "split_ratio": [7, 19], "num_work": [7, 19], "batch_siz": [7, 19, 23, 24], "dataload": [7, 12, 19, 36], "open": [7, 12, 19, 21, 22], "loop": [7, 19, 21, 22], "hard": [7, 19, 21], "code": [7, 19, 21, 22, 23, 36], "full": [7, 19], "match": [7, 19, 20], "origin": [7, 19, 22], "setup": [7, 19], "latter": [7, 16, 19, 20, 21, 22], "multi": [7, 12, 19, 21, 24], "split": [7, 19, 23, 36], "over": [7, 19, 21, 22], "rather": [7, 19], "length": [7, 19, 22], "window": [7, 19], "subsequ": [7, 19], "whether": [7, 19, 22, 24], "move": [7, 19, 22], "horizon": [7, 19], "see": [7, 12, 19, 22, 23, 24], "normalize_data": [7, 12, 19], "info": [7, 19], "percentag": [7, 19], "develop": [7, 19], "split_sequence_data": [7, 12, 19], "how": [7, 12, 19, 22, 24], "mani": [7, 19, 24], "subprocess": [7, 19], "load": [7, 19, 22], "main": [7, 19], "per": [7, 19, 36], "len": [7, 19, 22], "get_static_dataload": [7, 12, 19], "32": [7, 19], "normalize_01": [7, 12, 19], "infer": [7, 12, 19, 21, 22], "normalize_11": [7, 12, 19], "stat": [7, 19, 22], "statist": [7, 19, 22], "e": [7, 12, 19, 20, 22, 24], "zscore": [7, 19], "case": [7, 19, 22], "underli": [7, 19], "read_fil": [7, 12, 19, 22], "file_or_dir": [7, 19, 22], "test": [7, 12, 15, 19, 22, 36], "third": [7, 19, 22], "ratio": [7, 19], "predict": [7, 12, 19], "here": [7, 12, 19, 21, 23], "ensur": [7, 19, 22], "evenli": [7, 19, 22], "divis": [7, 19], "slide": [7, 19], "stride": [7, 19, 24], "els": [7, 19, 24], "assum": [7, 19, 20, 23], "two": [7, 19, 20, 22, 24], "indic": [7, 19, 22, 24], "includ": [7, 12, 19, 20, 21, 22, 23], "out": [7, 12, 19], "100": [7, 12, 19, 22, 36], "split_static_data": [7, 12, 19], "standard": [7, 12, 19], "unbatch_tensor": [7, 12, 19], "differenti": [11, 12, 19, 21, 24], "jacobian": [11, 12, 19, 21], "pwa": [11, 19], "form": [11, 12, 19, 22, 23], "constraint": [11, 12, 16, 21, 23], "y": [11, 12, 19, 22, 24], "grad_output": [11, 19, 23], "create_graph": [11, 19], "dy": [11, 19], "dx": [11, 19, 20], "j": [11, 12, 19, 21, 22], "dy_1": [11, 19], "dx_1": [11, 19], "dx_n": [11, 19], "dy_m": [11, 19], "adapt": [12, 21], "effici": 12, "regular": [12, 21, 23], "program": 12, "dp": 12, "solv": [12, 22], "parametr": [12, 21, 23], "constrain": [12, 23], "problem": [12, 20, 21, 36], "physic": [12, 16, 19, 22], "inform": [12, 16, 19, 20, 22, 23, 24], "identif": 12, "written": [12, 19], "http": [12, 16, 19, 20, 21, 22, 23], "org": [12, 16, 19, 20, 21, 22, 23], "systemat": 12, "integr": [12, 19, 22], "machin": 12, "learn": [12, 23, 24], "scientif": 12, "end": [12, 19, 22], "algorithm": [12, 21], "embed": [12, 21], "prior": [12, 19, 23], "knowledg": [12, 20], "now": 12, "avail": [12, 16, 19], "pypi": 12, "tutori": 12, "found": 12, "github": [12, 21, 22, 23], "com": [12, 19, 21, 22, 23], "pnnl": 12, "tree": 12, "master": [12, 21, 23], "folder": 12, "interact": [12, 19, 20, 21, 22], "notebook": [12, 22], "version": [12, 24], "googl": 12, "colab": 12, "befor": 12, "clone": 12, "repositori": 12, "up": [12, 24], "environ": 12, "introduct": 12, "part": [12, 24], "regress": 12, "v": [12, 21, 22, 23], "3": [12, 19, 20, 21, 22, 23, 24], "quadrat": [12, 21], "2d": [12, 19, 20, 22], "ordinari": 12, "equat": [12, 19, 21, 22], "od": [12, 19, 22], "univers": 12, "ud": 12, "exogen": [12, 22], "5": [12, 16, 19, 20, 22, 23, 36], "nssm": 12, "driven": 12, "resist": 12, "capacit": [12, 20], "rc": 12, "7": [12, 22], "deep": 12, "koopman": 12, "8": [12, 19, 22, 23, 24], "orient": 12, "pinn": 12, "partial": [12, 22], "pde": 12, "diffus": 12, "burger": 12, "invers": [12, 23], "convert": [12, 22, 24], "stabil": 12, "dynam": [12, 19, 22, 23], "unknown": 12, "lyapunov": [12, 21], "pdf": [12, 19, 21, 22, 23], "There": [12, 21, 24], "also": [12, 21, 22, 23, 24], "video": 12, "cover": 12, "core": [12, 22], "below": [12, 23], "nm": 12, "primal": 12, "solut": [12, 19, 21], "block": [12, 19, 20, 24], "mlp": [12, 19, 21], "insiz": [12, 20, 21, 23], "outsiz": [12, 20, 21, 23], "hsize": [12, 21], "80": [12, 20, 22], "sol_map": 12, "p": [12, 21, 22, 23, 24], "output_kei": [12, 19, 21], "primal_map": 12, "f": [12, 19, 20], "obj": 12, "con_1": 12, "con_2": 12, "con_3": 12, "penaltyloss": [12, 16, 19], "detail": [12, 24], "usag": [12, 24], "well": 12, "feedback": 12, "you": [12, 19, 22, 23, 24], "have": [12, 19, 20, 24], "interest": 12, "uniqu": 12, "wai": [12, 19, 24], "would": 12, "love": 12, "incorpor": 12, "our": [12, 23], "current": [12, 16, 19, 20, 22, 24], "To": [12, 24], "submit": 12, "your": [12, 22, 24], "isn": 12, "applic": [12, 21], "place": [12, 22, 24], "either": [12, 24], "execut": 12, "python": [12, 19, 21, 22], "file": [12, 15, 19, 22], "push": 12, "back": 12, "pull": 12, "request": 12, "pleas": 12, "make": [12, 21], "sure": 12, "note": [12, 19, 22, 24], "comment": 12, "top": 12, "depend": [12, 20, 23], "run": [12, 16, 19, 20, 21, 22], "those": 12, "accompani": 12, "lightweight": 12, "unit": [12, 20, 21, 22, 23], "pytest": 12, "easi": 12, "util": [12, 19, 23, 36], "introduc": [12, 23], "find": [12, 21], "want": [12, 19, 22, 23], "upcom": 12, "let": 12, "u": [12, 19, 20, 22, 23], "know": 12, "like": [12, 19, 22], "involv": 12, "mai": [12, 23], "abl": 12, "coordin": 12, "highli": 12, "valuabl": 12, "thought": 12, "faster": 12, "torchscript": 12, "uncertainti": 12, "quantif": 12, "onlin": [12, 20], "benchmark": [12, 19, 23], "dpc": [12, 19], "rl": 12, "conda": 12, "packag": [12, 29], "distribut": [12, 20, 22, 23], "cvxpy": 12, "simplifi": 12, "time": [12, 19, 20, 21, 22, 23], "seri": [12, 19, 22], "lightn": 12, "jame": 12, "koch": [12, 22], "zhao": 12, "chen": 12, "aaron": 12, "tuor": 12, "jan": 12, "drgona": [12, 22], "draguna": 12, "vrabi": 12, "structur": [12, 23], "arxiv": [12, 16, 19, 21, 22, 23], "2207": 12, "04962": 12, "2022": 12, "j\u00e1n": 12, "drgo\u0148a": 12, "sayak": 12, "mukherje": 12, "mahantesh": 12, "halappanavar": 12, "stochast": [12, 23], "ifac": 12, "rocond": 12, "confer": 12, "ieee": [12, 16, 19, 21], "decis": [12, 19], "wenceslao": 12, "shaw": 12, "cortez": 12, "safeti": 12, "guarante": 12, "barrier": [12, 16, 19], "approach": 12, "ethan": 12, "king": 12, "shrirang": 12, "abhyankar": 12, "craig": 12, "bakker": 12, "arnab": 12, "bhattacharya": 12, "awar": 12, "econom": 12, "dispatch": 12, "american": 12, "acc": 12, "chandan": 12, "zone": 12, "thermal": 12, "energi": [12, 21], "243": 12, "110992": 12, "2021": [12, 22], "skomski": 12, "vasisht": 12, "c": [12, 20, 22, 23], "wight": 12, "pp": 12, "3993": 12, "4000": 12, "doi": 12, "10": [12, 15, 16, 19, 21, 22, 23, 29], "23919": 12, "acc50511": 12, "9482930": 12, "autom": 12, "discoveri": 12, "evolut": [12, 19], "980": 12, "991": 12, "pmlr": 12, "explicit": [12, 20], "law": 12, "papersonlin": 12, "54": 12, "14": 12, "19": [12, 22], "2020": 12, "preprint": 12, "2004": 12, "10883": 12, "et": [12, 22], "al": [12, 22], "mpc": 12, "altern": 12, "journal": 12, "volum": [12, 20], "116": 12, "august": 12, "page": 12, "92": 12, "dissip": [12, 22], "vol": 12, "112": 12, "With": 12, "11184": 12, "articl": 12, "neuromancer2022": 12, "titl": 12, "author": [12, 21], "mia": 12, "dernbach": 12, "stefan": 12, "legaard": 12, "christian": 12, "m\u00f8ldrup": 12, "url": [12, 19, 22], "year": 12, "madelyn": 12, "shapiro": 12, "research": 12, "wa": 12, "artifici": 12, "reason": 12, "scienc": [12, 19, 22], "mar": 12, "converg": [12, 23], "dmc": 12, "initi": [12, 19, 22, 23, 24], "laboratori": 12, "ldrd": 12, "invest": 12, "pacif": 12, "northwest": 12, "nation": 12, "depart": 12, "offic": 12, "advanc": 12, "complex": [12, 19, 23, 24], "dnc2": 12, "renew": 12, "technologi": 12, "under": [12, 23], "decarbon": 12, "autonom": [12, 19, 20], "centric": 12, "market": 12, "readi": 12, "manag": 12, "cost": 12, "effect": [12, 20], "battel": 12, "memori": [12, 24], "institut": 12, "contract": 12, "No": [12, 22], "de": 12, "ac05": 12, "76rl0": 12, "1830": 12, "subpackag": 12, "submodul": 12, "interpol": [12, 19, 21, 22], "content": 12, "activ": [12, 19, 22], "rnn": [12, 19], "solver": [12, 19], "psl": [12, 19], "building_envelop": [12, 19], "coupled_system": [12, 19], "file_emul": [12, 19], "gym": [12, 19], "nonautonom": [12, 19, 20], "perturb": [12, 19], "signal": [12, 19, 20], "system_emul": [12, 19], "slim": [12, 19, 21], "bench": [12, 19], "arg": [12, 15, 16, 20, 21, 22, 23, 24], "callback": [12, 36], "dataset": [12, 22], "logger": [12, 36], "basiclogg": [12, 15, 19, 36], "clean_up": [12, 15, 19], "log_artifact": [12, 15, 19], "log_metr": [12, 15, 19], "log_paramet": [12, 15, 19], "log_weight": [12, 15, 19], "mlflowlogg": [12, 15, 19], "aggregateloss": [12, 16, 19], "calculate_constraint": [12, 16, 19], "calculate_object": [12, 16, 19], "augmentedlagrangeloss": [12, 16, 19], "barrierloss": [12, 16, 19], "get_loss": [12, 16, 19], "anim": [12, 19], "find_mat": [12, 19], "make_and_sav": [12, 19], "visual": [12, 19], "eval": [12, 19], "train_output": [12, 19], "train_plot": [12, 19], "visualizerclosedloop": [12, 19], "plot_matrix": [12, 19], "visualizerdobleintegr": [12, 19], "visualizeropen": [12, 19], "plot_traj": [12, 19], "visualizertrajectori": [12, 19], "visualizeruncertaintyopen": [12, 19], "cl_simul": [12, 19], "get_color": [12, 19, 22], "plot_cl": [12, 19], "plot_cl_train": [12, 19], "plot_loss_dpc": [12, 19], "plot_loss_mpp": [12, 19], "plot_matric": [12, 19], "plot_model_graph": [12, 19], "plot_polici": [12, 19], "plot_policy_train": [12, 19], "plot_solution_mpp": [12, 19], "plot_trajectori": [12, 19], "pltcl": [12, 19, 22], "pltcorrel": [12, 19, 22], "pltol": [12, 19, 22], "pltphase": [12, 19, 22], "pltrecurr": [12, 19, 22], "trajectory_movi": [12, 19], "movinghorizon": [12, 19], "cat": [12, 19, 22], "init": [12, 19, 23], "move_batch_to_devic": [12, 19, 36], "savedir": [15, 19], "stdout": [15, 19], "nstep_dev_loss": [15, 19], "loop_dev_loss": [15, 19], "best_loop_dev_loss": [15, 19], "nstep_dev_ref_loss": [15, 19], "loop_dev_ref_loss": [15, 19], "artifact": [15, 19], "store": [15, 19, 22, 24], "disc": [15, 19, 23], "print": [15, 19, 24], "onli": [15, 19, 20, 22, 24], "record": [15, 19, 22], "0d": [15, 19], "scalar": [15, 19], "epoch": [15, 19, 36], "pring": [15, 19], "experi": [15, 19], "parse_arg": [15, 19], "The": [15, 19, 20, 22, 23, 24], "learnabl": [15, 19, 21], "id": [15, 19], "logout": [15, 19], "remov": [15, 19], "temporari": [15, 19], "mlflow": [15, 19], "aggreg": [16, 19, 20, 21], "term": [16, 19, 20, 22], "aggeg": [16, 19], "sgd": [16, 19], "everi": [16, 19, 20, 21, 22], "overridden": [16, 19, 20, 21, 22, 24], "although": [16, 19, 20, 21, 22], "recip": [16, 19, 20, 21, 22], "need": [16, 19, 20, 21, 22, 23, 24], "within": [16, 19, 20, 21, 22], "instanc": [16, 19, 20, 21, 22], "afterward": [16, 19, 20, 21, 22], "instead": [16, 19, 20, 21, 22, 24, 36], "sinc": [16, 19, 20, 21, 22, 23], "former": [16, 19, 20, 21, 22], "regist": [16, 19, 20, 21, 22], "hook": [16, 19, 20, 21, 22], "while": [16, 19, 20, 21, 22, 23], "silent": [16, 19, 20, 21, 22], "ignor": [16, 19, 20, 21, 22], "train_data": [16, 19, 36], "inner_loop": [16, 19], "sigma": [16, 19, 22, 23], "mu_max": [16, 19], "1000": [16, 19, 22, 36], "mu_init": [16, 19], "001": [16, 19, 20, 21], "eta": [16, 19], "augment": [16, 19], "lagrangian": [16, 19], "en": [16, 19, 20, 21, 22, 23], "wikipedia": [16, 19, 20, 21, 22, 23], "wiki": [16, 19, 20, 21, 22, 23], "augmented_lagrangian_method": [16, 19], "log10": [16, 19], "upper_bound": [16, 19], "shift": [16, 19], "alpha": [16, 19, 21, 22], "barrier_funct": [16, 19], "relax": [16, 19], "ab": [16, 19, 21, 22, 23], "1602": [16, 19, 21], "01321": [16, 19, 21], "1904": [16, 19], "04205v2": [16, 19], "ieeexplor": [16, 19, 21], "document": [16, 19], "7493643": [16, 19], "magnitud": [16, 19], "cviolat": [16, 19], "penalty_method": [16, 19], "append": [16, 19], "diffeqintegr": [19, 20], "euler": [19, 20], "euler_trap": [19, 20], "reg_error": [19, 20, 21, 23], "leapfrog": [19, 20], "luther": [19, 20], "multistep_predictorcorrector": [19, 20], "rk2": [19, 20], "rk4": [19, 20], "rk4_trap": [19, 20], "runge_kutta_fehlberg": [19, 20], "yoshida4": [19, 20], "make_norm": [19, 20], "rms_norm": [19, 20], "lininterp_offlin": [19, 20], "lininterp_onlin": [19, 20], "brusselatorhybrid": [19, 20], "ode_equ": [19, 20], "brusselatorparam": [19, 20], "cstr_param": [19, 20], "duffingparam": [19, 20], "generalnetworkedod": [19, 20], "coupling_phys": [19, 20], "intrinsic_phys": [19, 20], "lorenzcontrol": [19, 20, 22], "lorenzparam": [19, 20], "lotkavolterrahybrid": [19, 20], "lotkavolterraparam": [19, 20], "odesystem": [19, 20], "twotankparam": [19, 20], "vanderpolcontrol": [19, 20, 22], "agent": [19, 20, 22], "intrins": [19, 20], "deltatemp": [19, 20], "deltatempswitch": [19, 20], "hvacconnect": [19, 20], "rcnode": [19, 20], "sourcesink": [19, 20], "map_from_ag": [19, 20], "aplu": [19, 21], "blu": [19, 21], "pelu": [19, 21], "prelu": [19, 21], "rectifiedsoftexp": [19, 21], "smoothedrelu": [19, 21], "softexponenti": [19, 21], "soft_exp": [19, 21], "basislinear": [19, 21], "block_ev": [19, 21], "bilineartorch": [19, 21], "dropout": [19, 21], "inputconvexnn": [19, 21], "interactionembeddingmlp": [19, 21], "interpolateaddmultipli": [19, 21], "mlpdropout": [19, 21], "mlp_bound": [19, 21], "bound_method": [19, 21], "poly2": [19, 21], "posdef": [19, 21], "pytorchrnn": [19, 21], "reset": [19, 21], "resmlp": [19, 21], "relu_clamp": [19, 21], "set_model_dropout_mod": [19, 21], "sigmoid_scal": [19, 21], "bounds_clamp": [19, 21], "bounds_scal": [19, 21], "rnncell": [19, 21, 23], "gradientproject": [19, 21], "con_viol_energi": [19, 21], "iterativesolv": [19, 21], "con_valu": [19, 21], "newton_step": [19, 21], "num_step": [19, 21], "autoignit": [19, 22], "brusselator1d": [19, 22], "chuacircuit": [19, 22], "doublependulum": [19, 22], "duf": [19, 22], "lorenzsystem": [19, 22], "lotkavolterra": [19, 22], "pendulum": [19, 22], "rosslerattractor": [19, 22], "thomasattractor": [19, 22], "universaloscil": [19, 22], "vanderpol": [19, 22], "backend": [19, 22], "numpy_backend": [19, 22], "torch_backend": [19, 22], "emulatorbas": [19, 22], "add_missing_paramet": [19, 22], "change_backend": [19, 22], "get_x0": [19, 22], "restore_random_st": [19, 22], "save_random_st": [19, 22], "set_param": [19, 22], "set_stat": [19, 22], "simul": [19, 21, 22], "equationwrapp": [19, 22], "ode_autonom": [19, 22], "ode_nonautonom": [19, 22], "get_r": [19, 22], "get_u": [19, 22], "get_simulation_arg": [19, 22], "cast_backend": [19, 22], "download": [19, 22], "buildingenvelop": [19, 22], "t_dist_idx": [19, 22], "get_d": [19, 22], "get_d_ob": [19, 22], "get_q": [19, 22], "get_xi": [19, 22], "path": [19, 22], "umax": [19, 22], "umin": [19, 22], "linearbuildingenvelop": [19, 22], "boid": [19, 22], "message_pass": [19, 22], "normalize_max": [19, 22], "pos_idx": [19, 22], "vel_idx": [19, 22], "coupled_nonautonom": [19, 22], "coupled_od": [19, 22], "gravitational_system": [19, 22], "make_4_bodi": [19, 22], "mass_idx": [19, 22], "rc_network": [19, 22], "get_c": [19, 22], "get_resist": [19, 22], "make_5_room": [19, 22], "multidim": [19, 22], "fileemul": [19, 22], "find_nearest": [19, 22], "get_batch": [19, 22], "retrieve_data": [19, 22], "actuat": [19, 22], "duffingcontrol": [19, 22], "hindmarshros": [19, 22], "invpendulum": [19, 22], "iversimpl": [19, 22], "u_fun": [19, 22], "seir_popul": [19, 22], "swingequ": [19, 22], "tank": [19, 22], "thomasattractorcontrol": [19, 22], "twotank": [19, 22], "standardscal": [19, 22], "inverse_transform": [19, 22], "transform": [19, 21, 22, 23], "period": [19, 22], "randomwalk": [19, 22], "sawtooth": [19, 22], "splinesign": [19, 22], "whitenois": [19, 22], "random_walk": [19, 22], "white_nois": [19, 22], "arma": [19, 22], "beta": [19, 22], "beta_walk_max_step": [19, 22], "beta_walk_mean": [19, 22], "nd_walk": [19, 22], "nois": [19, 22], "np_softmax": [19, 22], "prb": [19, 22], "sine": [19, 22], "spline": [19, 22], "walk": [19, 22], "system_to_psl": [19, 22], "butterfli": [19, 23], "butterfly_multipli": [19, 23], "complex_util": [19, 23], "permut": [19, 23], "permutation_multipli": [19, 23], "boundednormlinear": [19, 23], "butterflylinear": [19, 23], "effective_w": [19, 23], "dampedskewsymmetriclinear": [19, 23], "gershgorinlinear": [19, 23], "hprod": [19, 23], "identitygradrelu": [19, 23], "backward": [19, 23, 24], "identityinitlinear": [19, 23], "identitylinear": [19, 23], "l0linear": [19, 23], "cdf_qz": [19, 23], "get_ep": [19, 23], "quantile_concret": [19, 23], "lassolinear": [19, 23], "lassolinearrelu": [19, 23], "leftstochasticlinear": [19, 23], "linearbas": [19, 23], "devic": [19, 23, 36], "eig": [19, 23], "nonnegativelinear": [19, 23], "orthogonallinear": [19, 23], "psdlinear": [19, 23], "perronfrobeniuslinear": [19, 23], "powerboundlinear": [19, 23], "eig_v_estim": [19, 23], "rightstochasticlinear": [19, 23], "svdlinear": [19, 23], "orthogonal_error": [19, 23], "svdlinearlearnbound": [19, 23], "schurdecompositionlinear": [19, 23], "build_t": [19, 23], "skewsymmetriclinear": [19, 23], "spectrallinear": [19, 23], "umultipli": [19, 23], "vmultipli": [19, 23], "splitlinear": [19, 23], "squarelinear": [19, 23], "stablesplitlinear": [19, 23], "symmetriclinear": [19, 23], "symmetricsvdlinear": [19, 23], "symmetricspectrallinear": [19, 23], "symplecticlinear": [19, 23], "trivialnullspacelinear": [19, 23], "abc": [19, 20, 21, 22, 23], "helper": [19, 20, 21, 22, 23], "dynamics_model": 19, "filenam": 19, "u_kei": 19, "u_pred_polici": 19, "y_kei": 19, "y_pred_dynam": 19, "r_kei": 19, "rf": 19, "d_kei": 19, "ymin_kei": 19, "ymax_kei": 19, "umin_kei": 19, "umax_kei": 19, "ctrl_output": 19, "test_control": 19, "plot_weight": 19, "cl_control": 19, "png": [19, 22], "40": [19, 22], "x0": [19, 22], "training_visu": 19, "trace_movi": 19, "custom": [19, 23, 24], "doubl": [19, 22], "exampl": [19, 20, 22], "epoch_polici": 19, "close": [19, 22], "contro": 19, "landscap": 19, "dure": [19, 21, 23, 24], "true_traj": 19, "pred_traj": 19, "open_loop": 19, "plot_kei": 19, "dynamics_nam": 19, "pred_mean": 19, "pred_std": 19, "net": 19, "50": [19, 22], "color": [19, 22], "across": [19, 22], "wheel": [19, 22], "shape": [19, 20, 21, 22, 23], "save_path": 19, "x_list": 19, "u_list": 19, "xmin": [19, 21, 22], "xmax": [19, 21, 22], "multiparametr": 19, "matric": [19, 22, 23, 24], "label": 19, "grid": [19, 22], "inspect": 19, "layer": [19, 21, 23, 24], "filetyp": 19, "color_matric": 19, "rang": [19, 22, 23], "4": [19, 20, 22, 24], "11": [19, 21, 22], "matrix": [19, 22, 23, 24], "matrix_grid": 19, "data_kei": 19, "include_object": 19, "fname": 19, "model_graph": 19, "policy_list": 19, "traj1": 19, "traj2": 19, "ymin": [19, 22], "ymax": [19, 22], "correl": [19, 22], "realpython": [19, 22], "numpi": [19, 22, 24], "scipi": [19, 22], "panda": [19, 22], "ytrain": [19, 22], "numpoint": 19, "phase": [19, 22], "3d": [19, 22], "matplotlib": [19, 22], "galleri": [19, 22], "images_contours_and_field": [19, 22], "plot_streamplot": [19, 22], "html": [19, 22], "api": [19, 22], "_as_gen": [19, 22], "pyplot": [19, 22], "streamplot": [19, 22], "quiver": [19, 22], "kitchingroup": [19, 22], "cheme": [19, 22], "cmu": [19, 22], "edu": [19, 22], "blog": [19, 22], "2013": [19, 22], "02": [19, 22], "21": [19, 22], "portrait": [19, 22], "uni": [19, 22], "graz": [19, 22], "etextbook": [19, 22], "sw2": [19, 22], "phpl_python": [19, 22], "stack": [19, 23], "linspac": 19, "z": [19, 22, 24], "xyz": 19, "flatten": 19, "recurr": [19, 22, 23], "pyt": [19, 22], "readthedoc": [19, 22], "io": [19, 22], "stabl": [19, 22, 23], "auto_exampl": [19, 22], "imag": [19, 22], "plot_rp": [19, 22], "multivari": [19, 22], "plot_joint_rp": [19, 22], "sphx": [19, 22], "glr": [19, 22], "auto": [19, 22], "joint": [19, 22], "rp": [19, 22], "py": [19, 21, 22, 23, 29], "plot_mtf": [19, 22], "1610": [19, 22], "07273": [19, 22], "plot_gaf": [19, 22], "gaf": [19, 22], "traj": 19, "mp4": 19, "freq": 19, "fp": 19, "15": 19, "dpi": 19, "grad_infer": 19, "check_overwrit": 19, "similar": [19, 23], "spirit": 19, "sequenti": 19, "howev": 19, "concaten": [19, 21, 22], "repres": [19, 24], "addit": [19, 20, 21, 23, 24], "cyclic": [19, 22], "viabl": 19, "product": [19, 24], "rollout": 19, "non": [19, 22, 23, 24], "simpl": [19, 22], "delai": 19, "handl": [19, 21, 22, 24], "insid": 19, "sporad": 19, "scale": [19, 20, 21, 22], "nest": 19, "seem": 19, "natur": 19, "fit": 19, "ndelai": 19, "histori": 19, "buffer": 19, "singl": [19, 20, 22, 24], "past": 19, "wrapper": [19, 22, 23], "dim": [19, 20, 21, 22], "give": [19, 21], "last": [19, 24], "blank": 19, "repeat": 19, "connect": [19, 20, 23], "intermedi": [19, 24], "receiv": [19, 22, 23], "send": [19, 22], "associ": [19, 21, 23, 36], "nstep_kei": 19, "init_func": 19, "data3d": 19, "data2d": 19, "entri": 19, "asssum": 19, "assur": 19, "ani": [19, 22, 24], "start": [19, 24], "analysi": [19, 22], "dev_data": [19, 36], "test_data": [19, 36], "lr_schedul": [19, 36], "epoch_verbos": [19, 36], "patienc": [19, 36], "warmup": [19, 36], "train_metr": [19, 36], "train_loss": [19, 36], "dev_metr": [19, 36], "dev_loss": [19, 36], "test_metr": [19, 36], "test_loss": [19, 36], "eval_metr": [19, 36], "eval_mod": [19, 36], "clip": [19, 36], "cpu": [19, 36], "encapsul": [19, 36], "boilerpl": [19, 36], "procedur": [19, 36], "somewhat": [19, 36], "waypoint": [19, 36], "best_model": [19, 36], "deprec": [19, 36], "accord": [19, 20, 36], "valid": [19, 36], "termin": [19, 36], "earli": [19, 36], "threshold": [19, 36], "exceed": [19, 36], "nonautomonom": 20, "interp_u": 20, "h": [20, 22, 23], "batchsiz": [20, 21, 22, 23], "sysdim": 20, "x_": 20, "where": [20, 22, 24], "x_t": 20, "dot": [20, 22], "_t": 20, "_": 20, "predictor": 20, "corrector": 20, "implicit": 20, "trapezoid": 20, "rule": [20, 21], "rung": 20, "kutta": 20, "fehlberg": 20, "therefor": 20, "local": 20, "truncat": [20, 22], "error": [20, 23], "size": [20, 22, 23, 24], "suitabl": 20, "e2": [20, 22], "93kutta_method": 20, "adaptive_rung": 20, "tq": 20, "timestep": [20, 22], "actual": 20, "tempor": 20, "second": [20, 22, 24], "index": [20, 22], "coupl": [20, 22], "inductive_bia": 20, "heterogen": 20, "act": 20, "contribut": 20, "what": 20, "symmetr": [20, 22, 23], "select": 20, "induct": 20, "bia": [20, 21, 23, 24], "x_i": 20, "sum": [20, 22, 23], "x_j": 20, "rh": 20, "mix": 20, "expert": 20, "fx": [20, 23], "fu": 20, "nx": [20, 22], "nu": [20, 22], "fd": 20, "nd": [20, 22], "baselin": 20, "discret": 20, "x_k": [20, 21], "u_k": 20, "d_k": 20, "disturb": [20, 22], "state_nam": 20, "serv": 20, "anchor": 20, "pin": 20, "feature_nam": 20, "temperatur": [20, 22, 23], "switch": [20, 22], "off": 20, "nonzero": 20, "imposit": 20, "pairwis": [20, 21], "influenc": 20, "both": [20, 24], "lump": 20, "room": 20, "etc": [20, 22], "sink": 20, "dummi": 20, "attach": 20, "extern": [20, 22], "intrinsic_list": 20, "quick": 20, "nsegment": 21, "alpha_reg_weight": 21, "beta_reg_weight": 21, "tune_alpha": 21, "tune_beta": 21, "piecewis": 21, "1412": 21, "6830": 21, "after": 21, "l2": [21, 23], "bendabl": 21, "stamp": 21, "jsp": 21, "tp": 21, "arnumb": 21, "8913972": 21, "exponenti": 21, "1605": 21, "09332": 21, "elu": 21, "1502": 21, "01852": 21, "mysteri": 21, "unexplain": 21, "soft": [21, 23], "port": 21, "kera": 21, "thelukester92": 21, "2019": 21, "blob": [21, 23], "softexp": 21, "tune_d": 21, "region": 21, "rectifi": 21, "huber": 21, "continu": [21, 22], "2001": 21, "06116": 21, "appli": 21, "linear_map": 21, "nonlin": [21, 23], "64": 21, "linarg": 21, "expand": 21, "basi": 21, "expans": 21, "could": [21, 22], "lift": 21, "bilinear": [21, 22], "canon": [21, 22], "vari": [21, 22], "at_train": 21, "at_test": 21, "convex": 21, "z1": 21, "sig": 21, "w0": 21, "b0": 21, "z_i": 21, "sig_i": 21, "ui": 21, "zi": 21, "wi": 21, "bi": 21, "zk": 21, "n_interactor": 21, "9": [21, 22], "perceptron": 21, "hypernetwork": 21, "hidden": [21, 23], "decid": 21, "smooth": [21, 22], "q": [21, 22], "math": [21, 22], "rac": 21, "ep": 21, "01": [21, 22, 23], "enforc": [21, 23, 24], "posit": [21, 22, 23], "icnn": 21, "12": 21, "hx": 21, "logic": 21, "still": 21, "get": [21, 22], "context": [21, 23, 24], "skip": 21, "residu": 21, "chang": [21, 22, 24], "mode": [21, 23, 24], "enabl": 21, "mc": 21, "clamp": 21, "sigmoid": 21, "input_s": [21, 23], "16": [21, 23], "gelu": [21, 23], "init_st": [21, 23], "h_0": [21, 23], "num_lay": [21, 23], "hidden_s": [21, 23], "h_n": [21, 23], "decai": 21, "step_siz": 21, "energy_upd": 21, "project": 21, "correct": 21, "updat": 21, "neg": [21, 23], "neo": 21, "guid": 21, "dc3": 21, "paper": [21, 23], "2104": 21, "12225": 21, "potenti": [21, 23], "todo": [21, 22], "debug": [21, 24], "famili": 21, "iter": 21, "root": [21, 23], "phi": 21, "iterative_method": 21, "finding_algorithm": 21, "newton": 21, "j_g": 21, "express": [21, 23], "foward": 21, "emul": 22, "intern": 22, "hous": 22, "ground": 22, "truth": 22, "parti": 22, "list_of_nonlinear_ordinary_differential_equ": 22, "list_of_dynamical_systems_and_differential_equations_top": 22, "exclude_norm": 22, "seed": 22, "59": 22, "describ": 22, "pulsat": 22, "instabl": 22, "combustor": 22, "kurosaka": 22, "knowlen": 22, "kutz": 22, "multiscal": 22, "rotat": 22, "deton": 22, "wave": 22, "autosoliton": 22, "review": 22, "brussel": 22, "chua": 22, "circuit": [22, 23], "27s_circuit": 22, "www": 22, "matlabsim": 22, "php": 22, "lorenz": 22, "lorenz_system": 22, "ipywidget": 22, "20differenti": 22, "20equat": 22, "scipython": 22, "attractor": 22, "mplot3d": 22, "lorenz_attractor": 22, "lotka": 22, "volterra": 22, "known": 22, "predat": 22, "prei": 22, "r\u00f6ssler": 22, "thoma": 22, "27_cyclically_symmetric_attractor": 22, "harmon": 22, "oscil": 22, "harmonic_oscil": 22, "sam": 22, "dolan": 22, "staff": 22, "shef": 22, "ac": 22, "uk": 22, "mas212": 22, "ode_exampl": 22, "van": 22, "der": 22, "pol": 22, "van_der_pol_oscil": 22, "user": [22, 29], "birm560": [22, 29], "anaconda3": [22, 29], "env": [22, 29], "lib": [22, 29], "python3": [22, 29], "site": [22, 29], "lambda": 22, "odeint": 22, "functool": 22, "tfirst": 22, "randomli": 22, "condit": 22, "box": 22, "ndarrai": 22, "rng_state": 22, "later": 22, "nsim": 22, "sim": 22, "hyperbox": 22, "ax": 22, "along": 22, "axi": 22, "interv": 22, "By": 22, "respons": 22, "ninit": 22, "x_next": 22, "trajectori": 22, "nx0": 22, "signal_kwarg": 22, "decor": 22, "appropri": 22, "dst": 22, "don": 22, "host": 22, "pathlik": 22, "disk": 22, "reno_ful": 22, "envelop": 22, "heat": 22, "transfer": 22, "flow": 22, "buildings_paramet": 22, "mat": 22, "obtain": 22, "besim": 22, "hollandschhuys_rom100": 22, "221": 22, "hollandschhuys_ful": 22, "old_rom40": 22, "old_ful": 22, "renolight_rom40": 22, "renolight_ful": 22, "reno_rom40": 22, "simplesinglezon": 22, "y_next": 22, "ny": 22, "four": 22, "constant": 22, "meta": 22, "suppli": 22, "without": 22, "extra": [22, 24], "maxim": 22, "nomin": 22, "mass": 22, "deg": 22, "remot": 22, "locat": 22, "coher": 22, "05": 22, "align": 22, "avoidance_rang": 22, "visual_rang": 22, "rseed": 22, "sender": 22, "stub": 22, "messag": 22, "inherit": 22, "row": [22, 23], "_description_": 22, "adj": 22, "67e": 22, "10000": 22, "satelit": 22, "orbit": 22, "larger": [22, 24], "bodi": 22, "num": 22, "adj_list": 22, "rval": 22, "amax": 22, "20": [22, 23], "amin": 22, "is_autonom": 22, "facilit": 22, "wide": 22, "almost": 22, "exactli": 22, "expect": [22, 23], "csv": 22, "format": 22, "column": [22, 23], "observ": 22, "startidx": 22, "chaotic": 22, "These": 22, "iver": 22, "good": 22, "saniti": 22, "check": 22, "delta_u": 22, "delta_q": 22, "delta_r": 22, "delta_uc": 22, "delta_qc": 22, "delta_rc": 22, "thrust": 22, "speed": 22, "deflect": 22, "stir": 22, "reactor": 22, "apmonitor": 22, "cool": 22, "jacket": 22, "tf": 22, "feed": 22, "caf": 22, "concentr": 22, "mol": 22, "rand": [22, 23], "drive": 22, "forc": 22, "hindmarsh": 22, "rose": 22, "neuron": 22, "93rose_model": 22, "demonstr": 22, "wolfram": 22, "hindmarshroseneuronmodel": 22, "invert": 22, "heta": 22, "angl": 22, "upright": 22, "equilibrium": 22, "torqu": 22, "unman": 22, "underwat": 22, "vehicl": 22, "modifi": 22, "stankiewicz": 22, "exclud": 22, "roll": 22, "swai": 22, "hydrost": 22, "surfac": 22, "propel": 22, "kinemat": 22, "theta": 22, "psi": 22, "uu": 22, "suscept": 22, "expos": 22, "infect": 22, "recov": 22, "seir": 22, "popul": 22, "covid": 22, "spread": 22, "fraction": 22, "viru": 22, "transmit": 22, "infecti": 22, "immun": 22, "further": 22, "social": 22, "distanc": 22, "total": 22, "isol": 22, "power": [22, 23, 24], "swing": 22, "level": 22, "valv": 22, "coeffici": 22, "kg": 22, "theoret": 22, "section": 22, "2203": 22, "14114": 22, "subsum": 22, "boiler": 22, "plate": 22, "translat": [22, 23], "profil": 22, "excit": 22, "float64": 22, "camel": 22, "discourag": 22, "numperiod": 22, "sin": 22, "cosin": 22, "co": 22, "dimens": [22, 23, 24], "varianc": 22, "ramp": 22, "500": 22, "cubic": 22, "tstep": 22, "randstep": 22, "white": 22, "rsee": 22, "gaussian": 22, "stream": 22, "327": 22, "measur": 22, "elif": 22, "asu": 22, "pyinform": 22, "timeseri": 22, "ytrue": 22, "xtrain": 22, "rng": 22, "pcg64": 22, "0x7fa1e30727a0": 22, "autoregress": 22, "averag": 22, "0x7fa1e3072960": 22, "roughli": 22, "upsid": 22, "down": 22, "parabola": 22, "probabl": [22, 24], "flexibl": 22, "alwai": [22, 24], "scatter": 22, "max_step": 22, "dtype": 22, "float32": [22, 24], "0x7fa1e3072c00": 22, "necessari": 22, "distro": 22, "0x7fa1e3072b20": 22, "frown": 22, "individu": 22, "avoid_edg": 22, "granular": 22, "0x7fa1e3072ce0": 22, "avoid": 22, "uniform": [22, 23], "0x7fa1e3072340": 22, "independ": 22, "30": 22, "phase_offset": 22, "0x7fa1e3072500": 22, "0x7fa1e3072880": 22, "pseudo": 22, "binari": 22, "vice": 22, "versa": 22, "nwave": 22, "0x7fa1e30725e0": 22, "n_interpol": 22, "0x7fa1e30726c0": 22, "0x7fa1e3072420": 22, "0x7fa1e3072260": 22, "nm_model": 22, "psl_system": 22, "systempsl": 22, "extra_repr": [23, 24], "reset_paramet": [23, 24], "butterflyfactormult": [23, 24], "butterflymult": [23, 24], "butterflymultinplac": [23, 24], "butterflymultunti": [23, 24], "butterfly_mult": [23, 24], "butterfly_mult_factor": [23, 24], "butterfly_mult_torch": [23, 24], "butterfly_mult_unti": [23, 24], "butterfly_mult_untied_torch": [23, 24], "complexmatmulnp": [23, 24], "complexmul": [23, 24], "conjug": [23, 24], "complex_matmul_torch": [23, 24], "complex_mul_numpi": [23, 24], "complex_mul_torch": [23, 24], "conjugate_torch": [23, 24], "cupy2torch": [23, 24], "real_to_complex": [23, 24], "test_complex_mm": [23, 24], "test_complex_mul": [23, 24], "torch2cupi": [23, 24], "torch2numpi": [23, 24], "fixedpermut": [23, 24], "argmax": [23, 24], "permutationfactor": [23, 24], "permutationfactorevenoddmult": [23, 24], "permutationfactorreversemult": [23, 24], "permutation_mult": [23, 24], "permutation_mult_factor": [23, 24], "permutation_mult_singl": [23, 24], "permutation_mult_single_factor": [23, 24], "permutation_mult_single_factor_torch": [23, 24], "permutation_mult_torch": [23, 24], "bitreversal_permut": [23, 24], "strictli": 23, "diagon": [23, 24], "domin": 23, "singular": 23, "diagonally_dominant_matrix": 23, "doubli": 23, "doubly_stochastic_matrix": 23, "btaba": 23, "sinkhorn_knopp": 23, "heddacohenindelman": 23, "gumbel": 23, "sinkhorn": 23, "hamiltonian": 23, "hamiltonian_matrix": 23, "matrix_split": 23, "xavier_normal_": 23, "gain": 23, "kaiming_normal_": 23, "fan_in": 23, "leaky_relu": 23, "orthogonal_": 23, "sparse_": 23, "sparsiti": 23, "sigma_min": 23, "sigma_max": 23, "_p": 23, "eigenvalu": 23, "tied_weight": [23, 24], "increasing_strid": [23, 24], "ortho_init": [23, 24], "spars": 23, "hazyresearch": 23, "equival": [23, 24], "multipli": [23, 24], "in_featur": 23, "out_featur": 23, "skew": 23, "damp": 23, "symmetric_matrix": 23, "real": [23, 24], "gershgorin": 23, "2011": 23, "13492": 23, "household": 23, "reflect": 23, "represent": [23, 24], "own": [23, 24], "autograd": [23, 24], "ctx": [23, 24], "just": [23, 24], "previou": 23, "ident": 23, "stash": 23, "cach": 23, "save_for_backward": [23, 24], "weight_decai": 23, "droprate_init": 23, "6666666666666666": 23, "lamda": 23, "l0": 23, "fulli": 23, "amlab": 23, "amsterdam": 23, "l0_regular": 23, "l0_layer": 23, "1712": 23, "01312": 23, "adjust": 23, "minibatch": 23, "inhibit": 23, "caus": 23, "issu": 23, "cdf": 23, "stretch": 23, "concret": 23, "quantil": 23, "aka": 23, "gate": 23, "account": 23, "re": [23, 24], "gamma": 23, "leon": 23, "bottou": 23, "public": 23, "compstat": 23, "2010": 23, "squar": 23, "stochastic_matrix": 23, "eigenvector": 23, "provide_weight": 23, "vector": 23, "tupl": [23, 24], "orthogon": [23, 24], "1612": 23, "00188": 23, "semi": 23, "max_p": 23, "pwr_iter": 23, "200": 23, "spectral": 23, "radiu": 23, "factor": [23, 24], "unitari": [23, 24], "2101": 23, "01864": 23, "low": 23, "rank": 23, "openaccess": 23, "thecvf": 23, "content_cvprw_2020": 23, "w40": 23, "yang_learning_low": 23, "rank_deep_neural_networks_via_singular_vector_orthogonality_regularization_cvprw_2020_pap": 23, "semanticscholar": 23, "78b2": 23, "9eba4d6c836483c0aa67d637205e95223ae4": 23, "nip": 23, "cc": 23, "9513": 23, "nnrnn": 23, "long": 23, "improv": 23, "transient": 23, "antisymmetr": 23, "whose": 23, "its": 23, "n_u_reflector": 23, "n_v_reflector": 23, "paramater": 23, "tensorflow": 23, "zhangjiong724": 23, "spectral_rnn": 23, "n_reflector": 23, "symplectic_matrix": 23, "1705": 23, "03341": 23, "epsilon": 23, "trivial": 23, "null": 23, "1808": 23, "00924": 23, "cell_arg": 23, "cell": 23, "hidden_map": 23, "input_map": 23, "input_arg": 23, "hidden_arg": 23, "typic": 23, "in_siz": 24, "out_siz": 24, "2x2": 24, "ti": 24, "4n": 24, "count": 24, "increas": 24, "decreas": 24, "twiddl": 24, "word": 24, "log_strid": 24, "d_input": 24, "d_twiddl": 24, "nstack": 24, "formula": 24, "automat": 24, "alia": [24, 29], "vjp": 24, "must": 24, "follow": 24, "were": 24, "attribut": 24, "needs_input_grad": 24, "boolean": 24, "experiment": 24, "return_intermedi": 24, "kernel": 24, "complex_mul": 24, "imaginari": 24, "staticmethod": 24, "def": 24, "setup_context": 24, "longer": 24, "overrid": 24, "directli": 24, "though": 24, "save_for_forward": 24, "jvp": 24, "complex64": 24, "x_complex": 24, "share": 24, "share_logit": 24, "logit": 24, "smaller": 24, "revers": 24, "most": 24, "d_p": 24, "even": 24, "odd": 24, "halv": 24, "prob": 24, "parameter": 24, "1st": 24, "2nd": 24, "do": 24, "noth": 24, "bit": 24, "fft": 24, "integ": 24, "perm": 24}, "objects": {"": [[19, 0, 0, "-", "neuromancer"]], "neuromancer": [[0, 0, 0, "-", "activations"], [19, 0, 0, "-", "arg"], [2, 0, 0, "-", "blocks"], [19, 0, 0, "-", "callbacks"], [19, 0, 0, "-", "constraint"], [19, 0, 0, "-", "dataset"], [20, 0, 0, "-", "dynamics"], [19, 0, 0, "-", "gradients"], [19, 0, 0, "-", "loggers"], [19, 0, 0, "-", "loss"], [21, 0, 0, "-", "modules"], [19, 0, 0, "-", "plot"], [29, 5, 1, "", "problem"], [19, 0, 0, "-", "problem"], [22, 0, 0, "-", "psl"], [32, 0, 0, "-", "rnn"], [23, 0, 0, "-", "slim"], [35, 0, 0, "-", "solvers"], [19, 0, 0, "-", "system"], [36, 0, 0, "-", "trainer"]], "neuromancer.arg": [[19, 1, 1, "", "ArgParser"], [19, 3, 1, "", "add"], [19, 3, 1, "", "ctrl_loss"], [19, 3, 1, "", "data"], [19, 3, 1, "", "freeze"], [19, 3, 1, "", "lin"], [19, 3, 1, "", "log"], [19, 3, 1, "", "loss"], [19, 3, 1, "", "opt"], [19, 3, 1, "", "policy"], [19, 3, 1, "", "ssm"]], "neuromancer.arg.ArgParser": [[19, 2, 1, "", "check_for_group"], [19, 2, 1, "", "group"], [19, 2, 1, "", "parse_arg_groups"]], "neuromancer.callbacks": [[19, 1, 1, "", "Callback"]], "neuromancer.callbacks.Callback": [[19, 2, 1, "", "begin_epoch"], [19, 2, 1, "", "begin_eval"], [19, 2, 1, "", "begin_test"], [19, 2, 1, "", "begin_train"], [19, 2, 1, "", "end_batch"], [19, 2, 1, "", "end_epoch"], [19, 2, 1, "", "end_eval"], [19, 2, 1, "", "end_test"], [19, 2, 1, "", "end_train"]], "neuromancer.constraint": [[19, 1, 1, "", "Constraint"], [19, 1, 1, "", "Eq"], [19, 1, 1, "", "GT"], [19, 1, 1, "", "LT"], [19, 1, 1, "", "Loss"], [19, 1, 1, "", "Objective"], [19, 1, 1, "", "Variable"], [19, 3, 1, "", "variable"]], "neuromancer.constraint.Constraint": [[19, 2, 1, "", "forward"], [19, 2, 1, "", "grad"], [19, 2, 1, "", "update_name"], [19, 4, 1, "", "variable_names"]], "neuromancer.constraint.Eq": [[19, 2, 1, "", "forward"]], "neuromancer.constraint.GT": [[19, 2, 1, "", "forward"]], "neuromancer.constraint.LT": [[19, 2, 1, "", "forward"]], "neuromancer.constraint.Loss": [[19, 2, 1, "", "forward"], [19, 2, 1, "", "grad"]], "neuromancer.constraint.Objective": [[19, 2, 1, "", "forward"], [19, 2, 1, "", "grad"], [19, 4, 1, "", "variable_names"]], "neuromancer.constraint.Variable": [[19, 4, 1, "", "T"], [19, 2, 1, "", "check_keys"], [19, 4, 1, "", "display_name"], [19, 2, 1, "", "forward"], [19, 2, 1, "", "get_value"], [19, 2, 1, "", "grad"], [19, 4, 1, "", "key"], [19, 4, 1, "", "keys"], [19, 4, 1, "", "mT"], [19, 2, 1, "", "make_graph"], [19, 2, 1, "", "minimize"], [19, 2, 1, "", "show"], [19, 5, 1, "", "training"], [19, 5, 1, "", "unpack"], [19, 4, 1, "", "value"]], "neuromancer.dataset": [[19, 1, 1, "", "DictDataset"], [19, 1, 1, "", "GraphDataset"], [19, 1, 1, "", "SequenceDataset"], [19, 1, 1, "", "StaticDataset"], [19, 3, 1, "", "batch_tensor"], [19, 3, 1, "", "denormalize_01"], [19, 3, 1, "", "denormalize_11"], [19, 3, 1, "", "destandardize"], [19, 3, 1, "", "get_sequence_dataloaders"], [19, 3, 1, "", "get_static_dataloaders"], [19, 3, 1, "", "normalize_01"], [19, 3, 1, "", "normalize_11"], [19, 3, 1, "", "normalize_data"], [19, 3, 1, "", "read_file"], [19, 3, 1, "", "split_sequence_data"], [19, 3, 1, "", "split_static_data"], [19, 3, 1, "", "standardize"], [19, 3, 1, "", "unbatch_tensor"]], "neuromancer.dataset.DictDataset": [[19, 2, 1, "", "collate_fn"]], "neuromancer.dataset.GraphDataset": [[19, 2, 1, "", "build_graphs"], [19, 2, 1, "", "collate_fn"], [19, 2, 1, "", "make_map"], [19, 2, 1, "", "shuffle"]], "neuromancer.dataset.SequenceDataset": [[19, 2, 1, "", "collate_fn"], [19, 2, 1, "", "get_full_batch"], [19, 2, 1, "", "get_full_sequence"]], "neuromancer.dataset.StaticDataset": [[19, 2, 1, "", "collate_fn"], [19, 2, 1, "", "get_full_batch"]], "neuromancer.dynamics": [[20, 0, 0, "-", "integrators"], [20, 0, 0, "-", "interpolation"], [20, 0, 0, "-", "ode"], [20, 0, 0, "-", "physics"]], "neuromancer.dynamics.integrators": [[20, 1, 1, "", "DiffEqIntegrator"], [20, 1, 1, "", "Euler"], [20, 1, 1, "", "Euler_Trap"], [20, 1, 1, "", "Integrator"], [20, 1, 1, "", "LeapFrog"], [20, 1, 1, "", "Luther"], [20, 1, 1, "", "MultiStep_PredictorCorrector"], [20, 1, 1, "", "RK2"], [20, 1, 1, "", "RK4"], [20, 1, 1, "", "RK4_Trap"], [20, 1, 1, "", "Runge_Kutta_Fehlberg"], [20, 1, 1, "", "Yoshida4"], [20, 3, 1, "", "make_norm"], [20, 3, 1, "", "rms_norm"]], "neuromancer.dynamics.integrators.DiffEqIntegrator": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.Euler": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.Euler_Trap": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.Integrator": [[20, 2, 1, "", "forward"], [20, 2, 1, "", "integrate"], [20, 2, 1, "", "reg_error"]], "neuromancer.dynamics.integrators.LeapFrog": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.Luther": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.MultiStep_PredictorCorrector": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.RK2": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.RK4": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.RK4_Trap": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.Runge_Kutta_Fehlberg": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.integrators.Yoshida4": [[20, 2, 1, "", "integrate"]], "neuromancer.dynamics.interpolation": [[20, 1, 1, "", "Interpolation"], [20, 1, 1, "", "LinInterp_Offline"], [20, 1, 1, "", "LinInterp_Online"]], "neuromancer.dynamics.interpolation.Interpolation": [[20, 2, 1, "", "interpolation"]], "neuromancer.dynamics.interpolation.LinInterp_Offline": [[20, 2, 1, "", "interpolation"]], "neuromancer.dynamics.interpolation.LinInterp_Online": [[20, 2, 1, "", "interpolation"]], "neuromancer.dynamics.ode": [[20, 1, 1, "", "BrusselatorHybrid"], [20, 1, 1, "", "BrusselatorParam"], [20, 1, 1, "", "CSTR_Param"], [20, 1, 1, "", "DuffingParam"], [20, 1, 1, "", "GeneralNetworkedODE"], [20, 1, 1, "", "LorenzControl"], [20, 1, 1, "", "LorenzParam"], [20, 1, 1, "", "LotkaVolterraHybrid"], [20, 1, 1, "", "LotkaVolterraParam"], [20, 1, 1, "", "ODESystem"], [20, 1, 1, "", "SSM"], [20, 1, 1, "", "TwoTankParam"], [20, 1, 1, "", "VanDerPolControl"]], "neuromancer.dynamics.ode.BrusselatorHybrid": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.BrusselatorParam": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.CSTR_Param": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.DuffingParam": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.GeneralNetworkedODE": [[20, 2, 1, "", "coupling_physics"], [20, 2, 1, "", "intrinsic_physics"], [20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.LorenzControl": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.LorenzParam": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.LotkaVolterraHybrid": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.LotkaVolterraParam": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.ODESystem": [[20, 2, 1, "", "forward"], [20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.SSM": [[20, 2, 1, "", "forward"]], "neuromancer.dynamics.ode.TwoTankParam": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.ode.VanDerPolControl": [[20, 2, 1, "", "ode_equations"]], "neuromancer.dynamics.physics": [[20, 1, 1, "", "Agent"], [20, 1, 1, "", "DeltaTemp"], [20, 1, 1, "", "DeltaTempSwitch"], [20, 1, 1, "", "HVACConnection"], [20, 1, 1, "", "Interaction"], [20, 1, 1, "", "RCNode"], [20, 1, 1, "", "SourceSink"], [20, 3, 1, "", "map_from_agents"]], "neuromancer.dynamics.physics.Agent": [[20, 2, 1, "", "forward"], [20, 2, 1, "", "intrinsic"]], "neuromancer.dynamics.physics.DeltaTemp": [[20, 2, 1, "", "interact"]], "neuromancer.dynamics.physics.DeltaTempSwitch": [[20, 2, 1, "", "interact"]], "neuromancer.dynamics.physics.HVACConnection": [[20, 2, 1, "", "interact"]], "neuromancer.dynamics.physics.Interaction": [[20, 2, 1, "", "forward"], [20, 2, 1, "", "interact"]], "neuromancer.dynamics.physics.RCNode": [[20, 2, 1, "", "intrinsic"]], "neuromancer.dynamics.physics.SourceSink": [[20, 2, 1, "", "intrinsic"]], "neuromancer.gradients": [[19, 3, 1, "", "gradient"], [19, 3, 1, "", "jacobian"]], "neuromancer.loggers": [[19, 1, 1, "", "BasicLogger"], [19, 1, 1, "", "MLFlowLogger"]], "neuromancer.loggers.BasicLogger": [[19, 2, 1, "", "clean_up"], [19, 2, 1, "", "log_artifacts"], [19, 2, 1, "", "log_metrics"], [19, 2, 1, "", "log_parameters"], [19, 2, 1, "", "log_weights"]], "neuromancer.loggers.MLFlowLogger": [[19, 2, 1, "", "clean_up"], [19, 2, 1, "", "log_artifacts"], [19, 2, 1, "", "log_metrics"], [19, 2, 1, "", "log_parameters"], [19, 2, 1, "", "log_weights"]], "neuromancer.loss": [[19, 1, 1, "", "AggregateLoss"], [19, 1, 1, "", "AugmentedLagrangeLoss"], [19, 1, 1, "", "BarrierLoss"], [19, 1, 1, "", "PenaltyLoss"], [19, 3, 1, "", "get_loss"]], "neuromancer.loss.AggregateLoss": [[19, 2, 1, "", "calculate_constraints"], [19, 2, 1, "", "calculate_objectives"], [19, 2, 1, "", "forward"]], "neuromancer.loss.AugmentedLagrangeLoss": [[19, 2, 1, "", "forward"]], "neuromancer.loss.BarrierLoss": [[19, 2, 1, "", "calculate_constraints"]], "neuromancer.loss.PenaltyLoss": [[19, 2, 1, "", "forward"]], "neuromancer.modules": [[21, 0, 0, "-", "activations"], [21, 0, 0, "-", "blocks"], [21, 0, 0, "-", "functions"], [21, 0, 0, "-", "rnn"], [21, 0, 0, "-", "solvers"]], "neuromancer.modules.activations": [[21, 1, 1, "", "APLU"], [21, 1, 1, "", "BLU"], [21, 1, 1, "", "PELU"], [21, 1, 1, "", "PReLU"], [21, 1, 1, "", "RectifiedSoftExp"], [21, 1, 1, "", "SmoothedReLU"], [21, 1, 1, "", "SoftExponential"], [21, 3, 1, "", "soft_exp"]], "neuromancer.modules.activations.APLU": [[21, 2, 1, "", "forward"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.activations.BLU": [[21, 2, 1, "", "forward"]], "neuromancer.modules.activations.PELU": [[21, 2, 1, "", "forward"]], "neuromancer.modules.activations.PReLU": [[21, 2, 1, "", "forward"]], "neuromancer.modules.activations.RectifiedSoftExp": [[21, 2, 1, "", "forward"]], "neuromancer.modules.activations.SmoothedReLU": [[21, 2, 1, "", "forward"]], "neuromancer.modules.activations.SoftExponential": [[21, 2, 1, "", "forward"]], "neuromancer.modules.blocks": [[21, 1, 1, "", "BasisLinear"], [21, 1, 1, "", "BilinearTorch"], [21, 1, 1, "", "Block"], [21, 1, 1, "", "Dropout"], [21, 1, 1, "", "InputConvexNN"], [21, 1, 1, "", "InteractionEmbeddingMLP"], [21, 1, 1, "", "InterpolateAddMultiply"], [21, 1, 1, "", "Linear"], [21, 1, 1, "", "MLP"], [21, 1, 1, "", "MLPDropout"], [21, 1, 1, "", "MLP_bounds"], [21, 1, 1, "", "Poly2"], [21, 1, 1, "", "PosDef"], [21, 1, 1, "", "PytorchRNN"], [21, 1, 1, "", "RNN"], [21, 1, 1, "", "ResMLP"], [21, 3, 1, "", "relu_clamp"], [21, 3, 1, "", "set_model_dropout_mode"], [21, 3, 1, "", "sigmoid_scale"]], "neuromancer.modules.blocks.BasisLinear": [[21, 2, 1, "", "block_eval"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.blocks.BilinearTorch": [[21, 2, 1, "", "block_eval"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.blocks.Block": [[21, 2, 1, "", "block_eval"], [21, 2, 1, "", "forward"]], "neuromancer.modules.blocks.Dropout": [[21, 2, 1, "", "block_eval"]], "neuromancer.modules.blocks.InputConvexNN": [[21, 2, 1, "", "block_eval"]], "neuromancer.modules.blocks.InteractionEmbeddingMLP": [[21, 2, 1, "", "forward"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.blocks.InterpolateAddMultiply": [[21, 2, 1, "", "forward"]], "neuromancer.modules.blocks.Linear": [[21, 2, 1, "", "block_eval"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.blocks.MLP": [[21, 2, 1, "", "block_eval"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.blocks.MLPDropout": [[21, 2, 1, "", "block_eval"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.blocks.MLP_bounds": [[21, 2, 1, "", "block_eval"], [21, 5, 1, "", "bound_methods"]], "neuromancer.modules.blocks.Poly2": [[21, 2, 1, "", "block_eval"]], "neuromancer.modules.blocks.PosDef": [[21, 2, 1, "", "block_eval"]], "neuromancer.modules.blocks.PytorchRNN": [[21, 2, 1, "", "block_eval"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.blocks.RNN": [[21, 2, 1, "", "block_eval"], [21, 2, 1, "", "reg_error"], [21, 2, 1, "", "reset"]], "neuromancer.modules.blocks.ResMLP": [[21, 2, 1, "", "block_eval"]], "neuromancer.modules.functions": [[21, 3, 1, "", "bounds_clamp"], [21, 3, 1, "", "bounds_scaling"]], "neuromancer.modules.rnn": [[21, 1, 1, "", "RNN"], [21, 1, 1, "", "RNNCell"]], "neuromancer.modules.rnn.RNN": [[21, 2, 1, "", "forward"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.rnn.RNNCell": [[21, 2, 1, "", "forward"], [21, 2, 1, "", "reg_error"]], "neuromancer.modules.solvers": [[21, 1, 1, "", "GradientProjection"], [21, 1, 1, "", "IterativeSolver"], [21, 1, 1, "", "Solver"]], "neuromancer.modules.solvers.GradientProjection": [[21, 2, 1, "", "con_viol_energy"], [21, 2, 1, "", "forward"]], "neuromancer.modules.solvers.IterativeSolver": [[21, 2, 1, "", "con_values"], [21, 2, 1, "", "forward"], [21, 2, 1, "", "newton_step"], [21, 4, 1, "", "num_steps"]], "neuromancer.modules.solvers.Solver": [[21, 2, 1, "", "forward"]], "neuromancer.plot": [[19, 1, 1, "", "Animator"], [19, 1, 1, "", "Visualizer"], [19, 1, 1, "", "VisualizerClosedLoop"], [19, 1, 1, "", "VisualizerDobleIntegrator"], [19, 1, 1, "", "VisualizerOpen"], [19, 1, 1, "", "VisualizerTrajectories"], [19, 1, 1, "", "VisualizerUncertaintyOpen"], [19, 3, 1, "", "cl_simulate"], [19, 3, 1, "", "get_colors"], [19, 3, 1, "", "plot_cl"], [19, 3, 1, "", "plot_cl_train"], [19, 3, 1, "", "plot_loss_DPC"], [19, 3, 1, "", "plot_loss_mpp"], [19, 3, 1, "", "plot_matrices"], [19, 3, 1, "", "plot_model_graph"], [19, 3, 1, "", "plot_policy"], [19, 3, 1, "", "plot_policy_train"], [19, 3, 1, "", "plot_solution_mpp"], [19, 3, 1, "", "plot_traj"], [19, 3, 1, "", "plot_trajectories"], [19, 3, 1, "", "pltCL"], [19, 3, 1, "", "pltCorrelate"], [19, 3, 1, "", "pltOL"], [19, 3, 1, "", "pltPhase"], [19, 3, 1, "", "pltRecurrence"], [19, 3, 1, "", "trajectory_movie"]], "neuromancer.plot.Animator": [[19, 2, 1, "", "find_mat"], [19, 2, 1, "", "make_and_save"]], "neuromancer.plot.Visualizer": [[19, 2, 1, "", "eval"], [19, 2, 1, "", "train_output"], [19, 2, 1, "", "train_plot"]], "neuromancer.plot.VisualizerClosedLoop": [[19, 2, 1, "", "eval"], [19, 2, 1, "", "plot_matrix"]], "neuromancer.plot.VisualizerDobleIntegrator": [[19, 2, 1, "", "eval"], [19, 2, 1, "", "train_output"]], "neuromancer.plot.VisualizerOpen": [[19, 2, 1, "", "eval"], [19, 2, 1, "", "plot_matrix"], [19, 2, 1, "", "plot_traj"], [19, 2, 1, "", "train_output"], [19, 2, 1, "", "train_plot"]], "neuromancer.plot.VisualizerTrajectories": [[19, 2, 1, "", "eval"]], "neuromancer.plot.VisualizerUncertaintyOpen": [[19, 2, 1, "", "eval"], [19, 2, 1, "", "plot_traj"]], "neuromancer.problem": [[19, 1, 1, "", "Problem"]], "neuromancer.problem.Problem": [[19, 2, 1, "", "forward"], [19, 2, 1, "", "graph"], [19, 2, 1, "", "show"], [19, 2, 1, "", "step"]], "neuromancer.psl": [[22, 0, 0, "-", "autonomous"], [22, 0, 0, "-", "base"], [22, 0, 0, "-", "building_envelope"], [22, 0, 0, "-", "coupled_systems"], [22, 0, 0, "-", "file_emulator"], [22, 0, 0, "-", "nonautonomous"], [22, 0, 0, "-", "norms"], [22, 0, 0, "-", "perturb"], [22, 0, 0, "-", "plot"], [22, 0, 0, "-", "signals"], [22, 0, 0, "-", "system_emulator"]], "neuromancer.psl.autonomous": [[22, 1, 1, "", "Autoignition"], [22, 1, 1, "", "Brusselator1D"], [22, 1, 1, "", "ChuaCircuit"], [22, 1, 1, "", "DoublePendulum"], [22, 1, 1, "", "Duffing"], [22, 1, 1, "", "LorenzSystem"], [22, 1, 1, "", "LotkaVolterra"], [22, 1, 1, "", "Pendulum"], [22, 1, 1, "", "RosslerAttractor"], [22, 1, 1, "", "ThomasAttractor"], [22, 1, 1, "", "UniversalOscillator"], [22, 1, 1, "", "VanDerPol"]], "neuromancer.psl.autonomous.Autoignition": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.Brusselator1D": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.ChuaCircuit": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.DoublePendulum": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.Duffing": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.LorenzSystem": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.LotkaVolterra": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.Pendulum": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.RosslerAttractor": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.ThomasAttractor": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.UniversalOscillator": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.autonomous.VanDerPol": [[22, 2, 1, "", "equations"], [22, 4, 1, "", "params"]], "neuromancer.psl.base": [[22, 1, 1, "", "Backend"], [22, 1, 1, "", "EmulatorBase"], [22, 1, 1, "", "EquationWrapper"], [22, 1, 1, "", "ODE_Autonomous"], [22, 1, 1, "", "ODE_NonAutonomous"], [22, 3, 1, "", "cast_backend"], [22, 3, 1, "", "download"], [22, 3, 1, "", "grad"]], "neuromancer.psl.base.Backend": [[22, 5, 1, "", "backends"], [22, 5, 1, "", "numpy_backend"], [22, 5, 1, "", "torch_backend"]], "neuromancer.psl.base.EmulatorBase": [[22, 2, 1, "", "add_missing_parameters"], [22, 2, 1, "", "change_backend"], [22, 2, 1, "", "denormalize"], [22, 2, 1, "", "get_x0"], [22, 2, 1, "", "normalize"], [22, 4, 1, "", "params"], [22, 2, 1, "", "restore_random_state"], [22, 2, 1, "", "save_random_state"], [22, 2, 1, "", "set_params"], [22, 2, 1, "", "set_stats"], [22, 2, 1, "", "show"], [22, 2, 1, "", "simulate"]], "neuromancer.psl.base.ODE_Autonomous": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "forward"], [22, 2, 1, "", "simulate"]], "neuromancer.psl.base.ODE_NonAutonomous": [[22, 2, 1, "", "add_missing_parameters"], [22, 2, 1, "", "equations"], [22, 2, 1, "", "forward"], [22, 2, 1, "", "get_R"], [22, 2, 1, "", "get_U"], [22, 2, 1, "", "get_simulation_args"], [22, 2, 1, "", "simulate"]], "neuromancer.psl.building_envelope": [[22, 1, 1, "", "BuildingEnvelope"], [22, 1, 1, "", "LinearBuildingEnvelope"]], "neuromancer.psl.building_envelope.BuildingEnvelope": [[22, 5, 1, "", "T_dist_idx"], [22, 2, 1, "", "equations"], [22, 2, 1, "", "forward"], [22, 2, 1, "", "get_D"], [22, 2, 1, "", "get_D_obs"], [22, 2, 1, "", "get_R"], [22, 2, 1, "", "get_U"], [22, 2, 1, "", "get_q"], [22, 2, 1, "", "get_simulation_args"], [22, 2, 1, "", "get_xy"], [22, 4, 1, "", "params"], [22, 4, 1, "", "path"], [22, 2, 1, "", "simulate"], [22, 5, 1, "", "systems"], [22, 4, 1, "", "umax"], [22, 4, 1, "", "umin"], [22, 4, 1, "", "url"]], "neuromancer.psl.building_envelope.LinearBuildingEnvelope": [[22, 2, 1, "", "get_U"], [22, 2, 1, "", "get_q"], [22, 4, 1, "", "umax"], [22, 4, 1, "", "umin"]], "neuromancer.psl.coupled_systems": [[22, 1, 1, "", "Boids"], [22, 1, 1, "", "Coupled_NonAutonomous"], [22, 1, 1, "", "Coupled_ODE"], [22, 1, 1, "", "Gravitational_System"], [22, 1, 1, "", "RC_Network"], [22, 3, 1, "", "multidim"]], "neuromancer.psl.coupled_systems.Boids": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_x0"], [22, 2, 1, "", "message_passing"], [22, 2, 1, "", "normalize_max"], [22, 5, 1, "", "pos_idx"], [22, 2, 1, "", "simulate"], [22, 5, 1, "", "vel_idx"]], "neuromancer.psl.coupled_systems.Coupled_NonAutonomous": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "message_passing"], [22, 4, 1, "", "params"]], "neuromancer.psl.coupled_systems.Coupled_ODE": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "message_passing"], [22, 4, 1, "", "params"]], "neuromancer.psl.coupled_systems.Gravitational_System": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_x0"], [22, 2, 1, "", "make_4_body"], [22, 5, 1, "", "mass_idx"], [22, 2, 1, "", "message_passing"], [22, 5, 1, "", "pos_idx"], [22, 2, 1, "", "simulate"], [22, 5, 1, "", "vel_idx"]], "neuromancer.psl.coupled_systems.RC_Network": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_C"], [22, 2, 1, "", "get_U"], [22, 2, 1, "", "get_resistances"], [22, 2, 1, "", "get_x0"], [22, 2, 1, "", "make_5_room"], [22, 2, 1, "", "message_passing"]], "neuromancer.psl.file_emulator": [[22, 1, 1, "", "FileEmulator"], [22, 3, 1, "", "read_file"]], "neuromancer.psl.file_emulator.FileEmulator": [[22, 2, 1, "", "find_nearest"], [22, 2, 1, "", "get_batch"], [22, 4, 1, "", "params"], [22, 4, 1, "", "path"], [22, 2, 1, "", "retrieve_data"], [22, 2, 1, "", "simulate"], [22, 4, 1, "", "url"]], "neuromancer.psl.nonautonomous": [[22, 1, 1, "", "Actuator"], [22, 1, 1, "", "CSTR"], [22, 1, 1, "", "DuffingControl"], [22, 1, 1, "", "HindmarshRose"], [22, 1, 1, "", "InvPendulum"], [22, 1, 1, "", "IverSimple"], [22, 1, 1, "", "LorenzControl"], [22, 1, 1, "", "SEIR_population"], [22, 1, 1, "", "SwingEquation"], [22, 1, 1, "", "Tank"], [22, 1, 1, "", "ThomasAttractorControl"], [22, 1, 1, "", "TwoTank"], [22, 1, 1, "", "VanDerPolControl"]], "neuromancer.psl.nonautonomous.Actuator": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.CSTR": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 2, 1, "", "get_x0"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.DuffingControl": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.HindmarshRose": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.InvPendulum": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.IverSimple": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.LorenzControl": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"], [22, 2, 1, "", "u_fun"]], "neuromancer.psl.nonautonomous.SEIR_population": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.SwingEquation": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.Tank": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 2, 1, "", "get_x0"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.ThomasAttractorControl": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"]], "neuromancer.psl.nonautonomous.TwoTank": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 2, 1, "", "get_x0"], [22, 4, 1, "", "params"], [22, 4, 1, "", "umax"], [22, 4, 1, "", "umin"]], "neuromancer.psl.nonautonomous.VanDerPolControl": [[22, 2, 1, "", "equations"], [22, 2, 1, "", "get_U"], [22, 4, 1, "", "params"]], "neuromancer.psl.norms": [[22, 1, 1, "", "StandardScaler"], [22, 3, 1, "", "denormalize"], [22, 3, 1, "", "normalize"]], "neuromancer.psl.norms.StandardScaler": [[22, 2, 1, "", "inverse_transform"], [22, 2, 1, "", "transform"]], "neuromancer.psl.perturb": [[22, 3, 1, "", "Periodic"], [22, 3, 1, "", "RandomWalk"], [22, 3, 1, "", "Sawtooth"], [22, 3, 1, "", "SplineSignal"], [22, 3, 1, "", "Step"], [22, 3, 1, "", "Steps"], [22, 3, 1, "", "WhiteNoise"], [22, 3, 1, "", "random_walk"], [22, 3, 1, "", "white_noise"]], "neuromancer.psl.plot": [[22, 3, 1, "", "get_colors"], [22, 3, 1, "", "pltCL"], [22, 3, 1, "", "pltCorrelate"], [22, 3, 1, "", "pltOL"], [22, 3, 1, "", "pltPhase"], [22, 3, 1, "", "pltRecurrence"]], "neuromancer.psl.signals": [[22, 3, 1, "", "arma"], [22, 3, 1, "", "beta"], [22, 3, 1, "", "beta_walk_max_step"], [22, 3, 1, "", "beta_walk_mean"], [22, 3, 1, "", "nd_walk"], [22, 3, 1, "", "noise"], [22, 3, 1, "", "np_softmax"], [22, 3, 1, "", "periodic"], [22, 3, 1, "", "prbs"], [22, 3, 1, "", "sines"], [22, 3, 1, "", "spline"], [22, 3, 1, "", "step"], [22, 3, 1, "", "walk"]], "neuromancer.psl.system_emulator": [[22, 3, 1, "", "system_to_psl"]], "neuromancer.slim": [[24, 0, 0, "-", "butterfly"], [23, 0, 0, "-", "linear"], [23, 0, 0, "-", "rnn"]], "neuromancer.slim.butterfly": [[24, 0, 0, "-", "benchmark"], [24, 0, 0, "-", "butterfly"], [24, 0, 0, "-", "butterfly_multiply"], [24, 0, 0, "-", "complex_utils"], [24, 0, 0, "-", "permutation"], [24, 0, 0, "-", "permutation_multiply"], [24, 0, 0, "-", "utils"]], "neuromancer.slim.butterfly.butterfly": [[24, 1, 1, "", "Butterfly"]], "neuromancer.slim.butterfly.butterfly.Butterfly": [[24, 2, 1, "", "extra_repr"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "reset_parameters"]], "neuromancer.slim.butterfly.butterfly_multiply": [[24, 1, 1, "", "ButterflyFactorMult"], [24, 1, 1, "", "ButterflyMult"], [24, 1, 1, "", "ButterflyMultInplace"], [24, 1, 1, "", "ButterflyMultUntied"], [24, 3, 1, "", "butterfly_mult"], [24, 3, 1, "", "butterfly_mult_factors"], [24, 3, 1, "", "butterfly_mult_torch"], [24, 3, 1, "", "butterfly_mult_untied"], [24, 3, 1, "", "butterfly_mult_untied_torch"]], "neuromancer.slim.butterfly.butterfly_multiply.ButterflyFactorMult": [[24, 2, 1, "", "backward"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMult": [[24, 2, 1, "", "backward"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMultInplace": [[24, 2, 1, "", "backward"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMultUntied": [[24, 2, 1, "", "backward"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.complex_utils": [[24, 1, 1, "", "ComplexMatmulNp"], [24, 1, 1, "", "ComplexMul"], [24, 1, 1, "", "Conjugate"], [24, 3, 1, "", "complex_matmul_torch"], [24, 3, 1, "", "complex_mul_numpy"], [24, 3, 1, "", "complex_mul_torch"], [24, 3, 1, "", "conjugate_torch"], [24, 3, 1, "", "cupy2torch"], [24, 3, 1, "", "real_to_complex"], [24, 3, 1, "", "test_complex_mm"], [24, 3, 1, "", "test_complex_mul"], [24, 3, 1, "", "torch2cupy"], [24, 3, 1, "", "torch2numpy"]], "neuromancer.slim.butterfly.complex_utils.ComplexMatmulNp": [[24, 2, 1, "", "backward"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.complex_utils.ComplexMul": [[24, 2, 1, "", "backward"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.complex_utils.Conjugate": [[24, 2, 1, "", "backward"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.permutation": [[24, 1, 1, "", "FixedPermutation"], [24, 1, 1, "", "Permutation"], [24, 1, 1, "", "PermutationFactor"]], "neuromancer.slim.butterfly.permutation.FixedPermutation": [[24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.permutation.Permutation": [[24, 2, 1, "", "argmax"], [24, 2, 1, "", "extra_repr"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.permutation.PermutationFactor": [[24, 2, 1, "", "argmax"], [24, 2, 1, "", "extra_repr"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.permutation_multiply": [[24, 1, 1, "", "PermutationFactorEvenOddMult"], [24, 1, 1, "", "PermutationFactorReverseMult"], [24, 3, 1, "", "permutation_mult"], [24, 3, 1, "", "permutation_mult_factors"], [24, 3, 1, "", "permutation_mult_single"], [24, 3, 1, "", "permutation_mult_single_factor"], [24, 3, 1, "", "permutation_mult_single_factor_torch"], [24, 3, 1, "", "permutation_mult_torch"]], "neuromancer.slim.butterfly.permutation_multiply.PermutationFactorEvenOddMult": [[24, 2, 1, "", "backward"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.permutation_multiply.PermutationFactorReverseMult": [[24, 2, 1, "", "backward"], [24, 2, 1, "", "forward"]], "neuromancer.slim.butterfly.utils": [[24, 3, 1, "", "bitreversal_permutation"]], "neuromancer.slim.linear": [[23, 1, 1, "", "BoundedNormLinear"], [23, 1, 1, "", "ButterflyLinear"], [23, 1, 1, "", "DampedSkewSymmetricLinear"], [23, 1, 1, "", "GershgorinLinear"], [23, 3, 1, "", "Hprod"], [23, 1, 1, "", "IdentityGradReLU"], [23, 1, 1, "", "IdentityInitLinear"], [23, 1, 1, "", "IdentityLinear"], [23, 1, 1, "", "L0Linear"], [23, 1, 1, "", "LassoLinear"], [23, 1, 1, "", "LassoLinearRELU"], [23, 1, 1, "", "LeftStochasticLinear"], [23, 1, 1, "", "Linear"], [23, 1, 1, "", "LinearBase"], [23, 1, 1, "", "NonNegativeLinear"], [23, 1, 1, "", "OrthogonalLinear"], [23, 1, 1, "", "PSDLinear"], [23, 1, 1, "", "PerronFrobeniusLinear"], [23, 1, 1, "", "PowerBoundLinear"], [23, 1, 1, "", "RightStochasticLinear"], [23, 1, 1, "", "SVDLinear"], [23, 1, 1, "", "SVDLinearLearnBounds"], [23, 1, 1, "", "SchurDecompositionLinear"], [23, 1, 1, "", "SkewSymmetricLinear"], [23, 1, 1, "", "SpectralLinear"], [23, 1, 1, "", "SplitLinear"], [23, 1, 1, "", "SquareLinear"], [23, 1, 1, "", "StableSplitLinear"], [23, 1, 1, "", "SymmetricLinear"], [23, 1, 1, "", "SymmetricSVDLinear"], [23, 1, 1, "", "SymmetricSpectralLinear"], [23, 1, 1, "", "SymplecticLinear"], [23, 1, 1, "", "TrivialNullSpaceLinear"]], "neuromancer.slim.linear.BoundedNormLinear": [[23, 2, 1, "", "reg_error"]], "neuromancer.slim.linear.ButterflyLinear": [[23, 2, 1, "", "effective_W"], [23, 2, 1, "", "forward"]], "neuromancer.slim.linear.DampedSkewSymmetricLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.GershgorinLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.IdentityGradReLU": [[23, 2, 1, "", "backward"], [23, 2, 1, "", "forward"]], "neuromancer.slim.linear.L0Linear": [[23, 2, 1, "", "cdf_qz"], [23, 2, 1, "", "effective_W"], [23, 2, 1, "", "get_eps"], [23, 2, 1, "", "quantile_concrete"], [23, 2, 1, "", "reg_error"]], "neuromancer.slim.linear.LassoLinear": [[23, 2, 1, "", "effective_W"], [23, 2, 1, "", "forward"], [23, 2, 1, "", "reg_error"]], "neuromancer.slim.linear.LassoLinearRELU": [[23, 2, 1, "", "effective_W"], [23, 2, 1, "", "reg_error"]], "neuromancer.slim.linear.LeftStochasticLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.Linear": [[23, 2, 1, "", "effective_W"], [23, 2, 1, "", "forward"]], "neuromancer.slim.linear.LinearBase": [[23, 4, 1, "", "device"], [23, 2, 1, "", "effective_W"], [23, 2, 1, "", "eig"], [23, 2, 1, "", "forward"], [23, 2, 1, "", "reg_error"]], "neuromancer.slim.linear.NonNegativeLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.OrthogonalLinear": [[23, 2, 1, "", "effective_W"], [23, 2, 1, "", "forward"]], "neuromancer.slim.linear.PSDLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.PerronFrobeniusLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.PowerBoundLinear": [[23, 2, 1, "", "effective_W"], [23, 2, 1, "", "eig_v_estimate"], [23, 2, 1, "", "reg_error"]], "neuromancer.slim.linear.RightStochasticLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.SVDLinear": [[23, 2, 1, "", "effective_W"], [23, 2, 1, "", "orthogonal_error"], [23, 2, 1, "", "reg_error"]], "neuromancer.slim.linear.SchurDecompositionLinear": [[23, 2, 1, "", "build_T"], [23, 2, 1, "", "effective_W"], [23, 2, 1, "", "reg_error"]], "neuromancer.slim.linear.SkewSymmetricLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.SpectralLinear": [[23, 2, 1, "", "Sigma"], [23, 2, 1, "", "Umultiply"], [23, 2, 1, "", "Vmultiply"], [23, 2, 1, "", "effective_W"], [23, 2, 1, "", "forward"]], "neuromancer.slim.linear.SplitLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.SquareLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.StableSplitLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.SymmetricLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.SymplecticLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.linear.TrivialNullSpaceLinear": [[23, 2, 1, "", "effective_W"]], "neuromancer.slim.rnn": [[23, 1, 1, "", "RNN"], [23, 1, 1, "", "RNNCell"]], "neuromancer.slim.rnn.RNN": [[23, 2, 1, "", "forward"], [23, 2, 1, "", "reg_error"]], "neuromancer.slim.rnn.RNNCell": [[23, 2, 1, "", "forward"], [23, 2, 1, "", "reg_error"]], "neuromancer.system": [[19, 1, 1, "", "MovingHorizon"], [19, 1, 1, "", "Node"], [19, 1, 1, "", "System"]], "neuromancer.system.MovingHorizon": [[19, 2, 1, "", "forward"]], "neuromancer.system.Node": [[19, 2, 1, "", "forward"]], "neuromancer.system.System": [[19, 2, 1, "", "cat"], [19, 2, 1, "", "forward"], [19, 2, 1, "", "graph"], [19, 2, 1, "", "init"], [19, 2, 1, "", "show"]], "neuromancer.trainer": [[36, 1, 1, "", "Trainer"], [36, 3, 1, "", "move_batch_to_device"]], "neuromancer.trainer.Trainer": [[36, 2, 1, "", "evaluate"], [36, 2, 1, "", "test"], [36, 2, 1, "", "train"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"activ": [0, 21], "arg": [1, 19], "block": [2, 21], "bound": 3, "callback": [4, 19], "compon": 5, "constraint": [6, 19], "dataset": [7, 19], "dynam": [8, 20], "estim": 9, "gnn": 10, "gradient": [11, 19], "neuromanc": [12, 18, 19, 20, 21, 22, 23, 24], "v1": 12, "4": 12, "2": 12, "pip": 12, "instal": 12, "recommend": 12, "featur": 12, "exampl": 12, "addit": 12, "document": 12, "get": 12, "start": 12, "commun": 12, "contribut": 12, "code": 12, "report": 12, "issu": 12, "bug": 12, "develop": 12, "plan": 12, "public": 12, "cite": 12, "acknowledg": 12, "welcom": 12, "my": 12, "project": 12, "": 12, "integr": [13, 20], "interpol": [14, 20], "logger": [15, 19], "loss": [16, 19], "map": [17, 30], "packag": [19, 20, 21, 22, 23, 24], "subpackag": [19, 23], "submodul": [19, 20, 21, 22, 23, 24], "modul": [19, 20, 21, 22, 23, 24], "plot": [19, 22, 28], "problem": [19, 29], "system": 19, "trainer": [19, 36], "content": [19, 20, 21, 22, 23, 24], "od": [20, 25], "physic": [20, 27], "function": 21, "rnn": [21, 23, 32], "solver": [21, 35], "psl": 22, "autonom": 22, "base": 22, "building_envelop": 22, "coupled_system": 22, "file_emul": 22, "gym": 22, "nonautonom": 22, "norm": 22, "perturb": 22, "signal": 22, "system_emul": 22, "slim": [23, 24], "bench": 23, "linear": 23, "todo": 23, "butterfli": 24, "benchmark": 24, "butterfly_multipli": 24, "complex_util": 24, "permut": 24, "permutation_multipli": 24, "util": 24, "oper": 26, "pwa": 30, "readm": 31, "file": 31, "simul": [33, 34], "visual": 37}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Activations": [[0, "module-neuromancer.activations"]], "Arg": [[1, "module-neuromancer.arg"]], "Blocks": [[2, "module-neuromancer.blocks"]], "Bounds": [[3, "bounds"]], "Callbacks": [[4, "module-neuromancer.callbacks"]], "Component": [[5, "component"]], "Constraint": [[6, "module-neuromancer.constraint"]], "Dataset": [[7, "module-neuromancer.dataset"]], "Dynamics": [[8, "module-neuromancer.dynamics"]], "Estimators": [[9, "estimators"]], "GNN": [[10, "gnn"]], "Gradients": [[11, "module-neuromancer.gradients"]], "NeuroMANCER": [[12, "neuromancer"]], "NeuroMANCER v1.4.2": [[12, "neuromancer-v1-4-2"]], "Pip Installation (Recommended)": [[12, "pip-installation-recommended"]], "Features and Examples": [[12, "features-and-examples"]], "Additional Documentation": [[12, "additional-documentation"]], "Getting Started": [[12, "getting-started"]], "Examples": [[12, "examples"]], "Community": [[12, "community"]], "Contributing examples": [[12, "contributing-examples"]], "Contributing code": [[12, "contributing-code"]], "Reporting issues or bugs": [[12, "reporting-issues-or-bugs"]], "NeuroMANCER development plan": [[12, "neuromancer-development-plan"]], "Publications": [[12, "publications"]], "Cite as": [[12, "cite-as"]], "Acknowledgements": [[12, "acknowledgements"]], "Welcome to My Project\u2019s Documentation": [[12, "welcome-to-my-project-s-documentation"]], "Integrators": [[13, "integrators"]], "Interpolation": [[14, "interpolation"]], "Loggers": [[15, "module-neuromancer.loggers"]], "Loss": [[16, "module-neuromancer.loss"]], "Maps": [[17, "maps"]], "neuromancer": [[18, "neuromancer"]], "neuromancer package": [[19, "neuromancer-package"]], "Subpackages": [[19, "subpackages"], [23, "subpackages"]], "Submodules": [[19, "submodules"], [20, "submodules"], [21, "submodules"], [22, "submodules"], [23, "submodules"], [24, "submodules"]], "neuromancer.arg module": [[19, "module-neuromancer.arg"]], "neuromancer.callbacks module": [[19, "module-neuromancer.callbacks"]], "neuromancer.constraint module": [[19, "module-neuromancer.constraint"]], "neuromancer.dataset module": [[19, "module-neuromancer.dataset"]], "neuromancer.gradients module": [[19, "module-neuromancer.gradients"]], "neuromancer.loggers module": [[19, "module-neuromancer.loggers"]], "neuromancer.loss module": [[19, "module-neuromancer.loss"]], "neuromancer.plot module": [[19, "module-neuromancer.plot"]], "neuromancer.problem module": [[19, "module-neuromancer.problem"]], "neuromancer.system module": [[19, "module-neuromancer.system"]], "neuromancer.trainer module": [[19, "module-neuromancer.trainer"]], "Module contents": [[19, "module-neuromancer"], [20, "module-neuromancer.dynamics"], [21, "module-neuromancer.modules"], [22, "module-neuromancer.psl"], [23, "module-neuromancer.slim"], [24, "module-neuromancer.slim.butterfly"]], "neuromancer.dynamics package": [[20, "neuromancer-dynamics-package"]], "neuromancer.dynamics.integrators module": [[20, "module-neuromancer.dynamics.integrators"]], "neuromancer.dynamics.interpolation module": [[20, "module-neuromancer.dynamics.interpolation"]], "neuromancer.dynamics.ode module": [[20, "module-neuromancer.dynamics.ode"]], "neuromancer.dynamics.physics module": [[20, "module-neuromancer.dynamics.physics"]], "neuromancer.modules package": [[21, "neuromancer-modules-package"]], "neuromancer.modules.activations module": [[21, "module-neuromancer.modules.activations"]], "neuromancer.modules.blocks module": [[21, "module-neuromancer.modules.blocks"]], "neuromancer.modules.functions module": [[21, "module-neuromancer.modules.functions"]], "neuromancer.modules.rnn module": [[21, "module-neuromancer.modules.rnn"]], "neuromancer.modules.solvers module": [[21, "module-neuromancer.modules.solvers"]], "neuromancer.psl package": [[22, "neuromancer-psl-package"]], "neuromancer.psl.autonomous module": [[22, "module-neuromancer.psl.autonomous"]], "neuromancer.psl.base module": [[22, "module-neuromancer.psl.base"]], "neuromancer.psl.building_envelope module": [[22, "module-neuromancer.psl.building_envelope"]], "neuromancer.psl.coupled_systems module": [[22, "module-neuromancer.psl.coupled_systems"]], "neuromancer.psl.file_emulator module": [[22, "module-neuromancer.psl.file_emulator"]], "neuromancer.psl.gym module": [[22, "neuromancer-psl-gym-module"]], "neuromancer.psl.nonautonomous module": [[22, "module-neuromancer.psl.nonautonomous"]], "neuromancer.psl.norms module": [[22, "module-neuromancer.psl.norms"]], "neuromancer.psl.perturb module": [[22, "module-neuromancer.psl.perturb"]], "neuromancer.psl.plot module": [[22, "module-neuromancer.psl.plot"]], "neuromancer.psl.signals module": [[22, "module-neuromancer.psl.signals"]], "neuromancer.psl.system_emulator module": [[22, "module-neuromancer.psl.system_emulator"]], "neuromancer.slim package": [[23, "neuromancer-slim-package"]], "neuromancer.slim.bench module": [[23, "neuromancer-slim-bench-module"]], "neuromancer.slim.linear module": [[23, "module-neuromancer.slim.linear"]], "Todo": [[23, "id1"]], "neuromancer.slim.rnn module": [[23, "module-neuromancer.slim.rnn"]], "neuromancer.slim.butterfly package": [[24, "neuromancer-slim-butterfly-package"]], "neuromancer.slim.butterfly.benchmark module": [[24, "module-neuromancer.slim.butterfly.benchmark"]], "neuromancer.slim.butterfly.butterfly module": [[24, "module-neuromancer.slim.butterfly.butterfly"]], "neuromancer.slim.butterfly.butterfly_multiply module": [[24, "module-neuromancer.slim.butterfly.butterfly_multiply"]], "neuromancer.slim.butterfly.complex_utils module": [[24, "module-neuromancer.slim.butterfly.complex_utils"]], "neuromancer.slim.butterfly.permutation module": [[24, "module-neuromancer.slim.butterfly.permutation"]], "neuromancer.slim.butterfly.permutation_multiply module": [[24, "module-neuromancer.slim.butterfly.permutation_multiply"]], "neuromancer.slim.butterfly.utils module": [[24, "module-neuromancer.slim.butterfly.utils"]], "ODE": [[25, "ode"]], "Operators": [[26, "operators"]], "Physics": [[27, "physics"]], "Plot": [[28, "plot"]], "Problem": [[29, "problem"]], "PWA Maps": [[30, "pwa-maps"]], "Readme File": [[31, "readme-file"]], "RNN": [[32, "module-neuromancer.rnn"]], "Simulator": [[33, "simulator"]], "Simulators": [[34, "simulators"]], "Solvers": [[35, "module-neuromancer.solvers"]], "Trainer": [[36, "module-neuromancer.trainer"]], "Visuals": [[37, "visuals"]]}, "indexentries": {"module": [[0, "module-neuromancer.activations"], [1, "module-neuromancer.arg"], [2, "module-neuromancer.blocks"], [4, "module-neuromancer.callbacks"], [6, "module-neuromancer.constraint"], [7, "module-neuromancer.dataset"], [8, "module-neuromancer.dynamics"], [11, "module-neuromancer.gradients"], [15, "module-neuromancer.loggers"], [16, "module-neuromancer.loss"], [19, "module-neuromancer"], [19, "module-neuromancer.arg"], [19, "module-neuromancer.callbacks"], [19, "module-neuromancer.constraint"], [19, "module-neuromancer.dataset"], [19, "module-neuromancer.gradients"], [19, "module-neuromancer.loggers"], [19, "module-neuromancer.loss"], [19, "module-neuromancer.plot"], [19, "module-neuromancer.problem"], [19, "module-neuromancer.system"], [19, "module-neuromancer.trainer"], [20, "module-neuromancer.dynamics"], [20, "module-neuromancer.dynamics.integrators"], [20, "module-neuromancer.dynamics.interpolation"], [20, "module-neuromancer.dynamics.ode"], [20, "module-neuromancer.dynamics.physics"], [21, "module-neuromancer.modules"], [21, "module-neuromancer.modules.activations"], [21, "module-neuromancer.modules.blocks"], [21, "module-neuromancer.modules.functions"], [21, "module-neuromancer.modules.rnn"], [21, "module-neuromancer.modules.solvers"], [22, "module-neuromancer.psl"], [22, "module-neuromancer.psl.autonomous"], [22, "module-neuromancer.psl.base"], [22, "module-neuromancer.psl.building_envelope"], [22, "module-neuromancer.psl.coupled_systems"], [22, "module-neuromancer.psl.file_emulator"], [22, "module-neuromancer.psl.nonautonomous"], [22, "module-neuromancer.psl.norms"], [22, "module-neuromancer.psl.perturb"], [22, "module-neuromancer.psl.plot"], [22, "module-neuromancer.psl.signals"], [22, "module-neuromancer.psl.system_emulator"], [23, "module-neuromancer.slim"], [23, "module-neuromancer.slim.linear"], [23, "module-neuromancer.slim.rnn"], [24, "module-neuromancer.slim.butterfly"], [24, "module-neuromancer.slim.butterfly.benchmark"], [24, "module-neuromancer.slim.butterfly.butterfly"], [24, "module-neuromancer.slim.butterfly.butterfly_multiply"], [24, "module-neuromancer.slim.butterfly.complex_utils"], [24, "module-neuromancer.slim.butterfly.permutation"], [24, "module-neuromancer.slim.butterfly.permutation_multiply"], [24, "module-neuromancer.slim.butterfly.utils"], [32, "module-neuromancer.rnn"], [35, "module-neuromancer.solvers"], [36, "module-neuromancer.trainer"]], "neuromancer.activations": [[0, "module-neuromancer.activations"]], "argparser (class in neuromancer.arg)": [[1, "neuromancer.arg.ArgParser"], [19, "neuromancer.arg.ArgParser"]], "add() (in module neuromancer.arg)": [[1, "neuromancer.arg.add"], [19, "neuromancer.arg.add"]], "check_for_group() (neuromancer.arg.argparser method)": [[1, "neuromancer.arg.ArgParser.check_for_group"], [19, "neuromancer.arg.ArgParser.check_for_group"]], "ctrl_loss() (in module neuromancer.arg)": [[1, "neuromancer.arg.ctrl_loss"], [19, "neuromancer.arg.ctrl_loss"]], "data() (in module neuromancer.arg)": [[1, "neuromancer.arg.data"], [19, "neuromancer.arg.data"]], "freeze() (in module neuromancer.arg)": [[1, "neuromancer.arg.freeze"], [19, "neuromancer.arg.freeze"]], "group() (neuromancer.arg.argparser method)": [[1, "neuromancer.arg.ArgParser.group"], [19, "neuromancer.arg.ArgParser.group"]], "lin() (in module neuromancer.arg)": [[1, "neuromancer.arg.lin"], [19, "neuromancer.arg.lin"]], "log() (in module neuromancer.arg)": [[1, "neuromancer.arg.log"], [19, "neuromancer.arg.log"]], "loss() (in module neuromancer.arg)": [[1, "neuromancer.arg.loss"], [19, "neuromancer.arg.loss"]], "neuromancer.arg": [[1, "module-neuromancer.arg"], [19, "module-neuromancer.arg"]], "opt() (in module neuromancer.arg)": [[1, "neuromancer.arg.opt"], [19, "neuromancer.arg.opt"]], "parse_arg_groups() (neuromancer.arg.argparser method)": [[1, "neuromancer.arg.ArgParser.parse_arg_groups"], [19, "neuromancer.arg.ArgParser.parse_arg_groups"]], "policy() (in module neuromancer.arg)": [[1, "neuromancer.arg.policy"], [19, "neuromancer.arg.policy"]], "ssm() (in module neuromancer.arg)": [[1, "neuromancer.arg.ssm"], [19, "neuromancer.arg.ssm"]], "neuromancer.blocks": [[2, "module-neuromancer.blocks"]], "callback (class in neuromancer.callbacks)": [[4, "neuromancer.callbacks.Callback"], [19, "neuromancer.callbacks.Callback"]], "begin_epoch() (neuromancer.callbacks.callback method)": [[4, "neuromancer.callbacks.Callback.begin_epoch"], [19, "neuromancer.callbacks.Callback.begin_epoch"]], "begin_eval() (neuromancer.callbacks.callback method)": [[4, "neuromancer.callbacks.Callback.begin_eval"], [19, "neuromancer.callbacks.Callback.begin_eval"]], "begin_test() (neuromancer.callbacks.callback method)": [[4, "neuromancer.callbacks.Callback.begin_test"], [19, "neuromancer.callbacks.Callback.begin_test"]], "begin_train() (neuromancer.callbacks.callback method)": [[4, "neuromancer.callbacks.Callback.begin_train"], [19, "neuromancer.callbacks.Callback.begin_train"]], "end_batch() (neuromancer.callbacks.callback method)": [[4, "neuromancer.callbacks.Callback.end_batch"], [19, "neuromancer.callbacks.Callback.end_batch"]], "end_epoch() (neuromancer.callbacks.callback method)": [[4, "neuromancer.callbacks.Callback.end_epoch"], [19, "neuromancer.callbacks.Callback.end_epoch"]], "end_eval() (neuromancer.callbacks.callback method)": [[4, "neuromancer.callbacks.Callback.end_eval"], [19, "neuromancer.callbacks.Callback.end_eval"]], "end_test() (neuromancer.callbacks.callback method)": [[4, "neuromancer.callbacks.Callback.end_test"], [19, "neuromancer.callbacks.Callback.end_test"]], "end_train() (neuromancer.callbacks.callback method)": [[4, "neuromancer.callbacks.Callback.end_train"], [19, "neuromancer.callbacks.Callback.end_train"]], "neuromancer.callbacks": [[4, "module-neuromancer.callbacks"], [19, "module-neuromancer.callbacks"]], "constraint (class in neuromancer.constraint)": [[6, "neuromancer.constraint.Constraint"], [19, "neuromancer.constraint.Constraint"]], "eq (class in neuromancer.constraint)": [[6, "neuromancer.constraint.Eq"], [19, "neuromancer.constraint.Eq"]], "gt (class in neuromancer.constraint)": [[6, "neuromancer.constraint.GT"], [19, "neuromancer.constraint.GT"]], "lt (class in neuromancer.constraint)": [[6, "neuromancer.constraint.LT"], [19, "neuromancer.constraint.LT"]], "loss (class in neuromancer.constraint)": [[6, "neuromancer.constraint.Loss"], [19, "neuromancer.constraint.Loss"]], "objective (class in neuromancer.constraint)": [[6, "neuromancer.constraint.Objective"], [19, "neuromancer.constraint.Objective"]], "t (neuromancer.constraint.variable property)": [[6, "neuromancer.constraint.Variable.T"], [19, "neuromancer.constraint.Variable.T"]], "variable (class in neuromancer.constraint)": [[6, "neuromancer.constraint.Variable"], [19, "neuromancer.constraint.Variable"]], "check_keys() (neuromancer.constraint.variable method)": [[6, "neuromancer.constraint.Variable.check_keys"], [19, "neuromancer.constraint.Variable.check_keys"]], "display_name (neuromancer.constraint.variable property)": [[6, "neuromancer.constraint.Variable.display_name"], [19, "neuromancer.constraint.Variable.display_name"]], "forward() (neuromancer.constraint.constraint method)": [[6, "neuromancer.constraint.Constraint.forward"], [19, "neuromancer.constraint.Constraint.forward"]], "forward() (neuromancer.constraint.eq method)": [[6, "neuromancer.constraint.Eq.forward"], [19, "neuromancer.constraint.Eq.forward"]], "forward() (neuromancer.constraint.gt method)": [[6, "neuromancer.constraint.GT.forward"], [19, "neuromancer.constraint.GT.forward"]], "forward() (neuromancer.constraint.lt method)": [[6, "neuromancer.constraint.LT.forward"], [19, "neuromancer.constraint.LT.forward"]], "forward() (neuromancer.constraint.loss method)": [[6, "neuromancer.constraint.Loss.forward"], [19, "neuromancer.constraint.Loss.forward"]], "forward() (neuromancer.constraint.objective method)": [[6, "neuromancer.constraint.Objective.forward"], [19, "neuromancer.constraint.Objective.forward"]], "forward() (neuromancer.constraint.variable method)": [[6, "neuromancer.constraint.Variable.forward"], [19, "neuromancer.constraint.Variable.forward"]], "get_value() (neuromancer.constraint.variable method)": [[6, "neuromancer.constraint.Variable.get_value"], [19, "neuromancer.constraint.Variable.get_value"]], "grad() (neuromancer.constraint.constraint method)": [[6, "neuromancer.constraint.Constraint.grad"], [19, "neuromancer.constraint.Constraint.grad"]], "grad() (neuromancer.constraint.loss method)": [[6, "neuromancer.constraint.Loss.grad"], [19, "neuromancer.constraint.Loss.grad"]], "grad() (neuromancer.constraint.objective method)": [[6, "neuromancer.constraint.Objective.grad"], [19, "neuromancer.constraint.Objective.grad"]], "grad() (neuromancer.constraint.variable method)": [[6, "neuromancer.constraint.Variable.grad"], [19, "neuromancer.constraint.Variable.grad"]], "key (neuromancer.constraint.variable property)": [[6, "neuromancer.constraint.Variable.key"], [19, "neuromancer.constraint.Variable.key"]], "keys (neuromancer.constraint.variable property)": [[6, "neuromancer.constraint.Variable.keys"], [19, "neuromancer.constraint.Variable.keys"]], "mt (neuromancer.constraint.variable property)": [[6, "neuromancer.constraint.Variable.mT"], [19, "neuromancer.constraint.Variable.mT"]], "make_graph() (neuromancer.constraint.variable method)": [[6, "neuromancer.constraint.Variable.make_graph"], [19, "neuromancer.constraint.Variable.make_graph"]], "minimize() (neuromancer.constraint.variable method)": [[6, "neuromancer.constraint.Variable.minimize"], [19, "neuromancer.constraint.Variable.minimize"]], "neuromancer.constraint": [[6, "module-neuromancer.constraint"], [19, "module-neuromancer.constraint"]], "show() (neuromancer.constraint.variable method)": [[6, "neuromancer.constraint.Variable.show"], [19, "neuromancer.constraint.Variable.show"]], "unpack (neuromancer.constraint.variable attribute)": [[6, "neuromancer.constraint.Variable.unpack"], [19, "neuromancer.constraint.Variable.unpack"]], "update_name() (neuromancer.constraint.constraint method)": [[6, "neuromancer.constraint.Constraint.update_name"], [19, "neuromancer.constraint.Constraint.update_name"]], "value (neuromancer.constraint.variable property)": [[6, "neuromancer.constraint.Variable.value"], [19, "neuromancer.constraint.Variable.value"]], "variable() (in module neuromancer.constraint)": [[6, "neuromancer.constraint.variable"], [19, "neuromancer.constraint.variable"]], "variable_names (neuromancer.constraint.constraint property)": [[6, "neuromancer.constraint.Constraint.variable_names"], [19, "neuromancer.constraint.Constraint.variable_names"]], "variable_names (neuromancer.constraint.objective property)": [[6, "neuromancer.constraint.Objective.variable_names"], [19, "neuromancer.constraint.Objective.variable_names"]], "dictdataset (class in neuromancer.dataset)": [[7, "neuromancer.dataset.DictDataset"], [19, "neuromancer.dataset.DictDataset"]], "graphdataset (class in neuromancer.dataset)": [[7, "neuromancer.dataset.GraphDataset"], [19, "neuromancer.dataset.GraphDataset"]], "sequencedataset (class in neuromancer.dataset)": [[7, "neuromancer.dataset.SequenceDataset"], [19, "neuromancer.dataset.SequenceDataset"]], "staticdataset (class in neuromancer.dataset)": [[7, "neuromancer.dataset.StaticDataset"], [19, "neuromancer.dataset.StaticDataset"]], "batch_tensor() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.batch_tensor"], [19, "neuromancer.dataset.batch_tensor"]], "build_graphs() (neuromancer.dataset.graphdataset method)": [[7, "neuromancer.dataset.GraphDataset.build_graphs"], [19, "neuromancer.dataset.GraphDataset.build_graphs"]], "collate_fn() (neuromancer.dataset.dictdataset method)": [[7, "neuromancer.dataset.DictDataset.collate_fn"], [19, "neuromancer.dataset.DictDataset.collate_fn"]], "collate_fn() (neuromancer.dataset.graphdataset static method)": [[7, "neuromancer.dataset.GraphDataset.collate_fn"], [19, "neuromancer.dataset.GraphDataset.collate_fn"]], "collate_fn() (neuromancer.dataset.sequencedataset method)": [[7, "neuromancer.dataset.SequenceDataset.collate_fn"], [19, "neuromancer.dataset.SequenceDataset.collate_fn"]], "collate_fn() (neuromancer.dataset.staticdataset method)": [[7, "neuromancer.dataset.StaticDataset.collate_fn"], [19, "neuromancer.dataset.StaticDataset.collate_fn"]], "denormalize_01() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.denormalize_01"], [19, "neuromancer.dataset.denormalize_01"]], "denormalize_11() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.denormalize_11"], [19, "neuromancer.dataset.denormalize_11"]], "destandardize() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.destandardize"], [19, "neuromancer.dataset.destandardize"]], "get_full_batch() (neuromancer.dataset.sequencedataset method)": [[7, "neuromancer.dataset.SequenceDataset.get_full_batch"], [19, "neuromancer.dataset.SequenceDataset.get_full_batch"]], "get_full_batch() (neuromancer.dataset.staticdataset method)": [[7, "neuromancer.dataset.StaticDataset.get_full_batch"], [19, "neuromancer.dataset.StaticDataset.get_full_batch"]], "get_full_sequence() (neuromancer.dataset.sequencedataset method)": [[7, "neuromancer.dataset.SequenceDataset.get_full_sequence"], [19, "neuromancer.dataset.SequenceDataset.get_full_sequence"]], "get_sequence_dataloaders() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.get_sequence_dataloaders"], [19, "neuromancer.dataset.get_sequence_dataloaders"]], "get_static_dataloaders() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.get_static_dataloaders"], [19, "neuromancer.dataset.get_static_dataloaders"]], "make_map() (neuromancer.dataset.graphdataset method)": [[7, "neuromancer.dataset.GraphDataset.make_map"], [19, "neuromancer.dataset.GraphDataset.make_map"]], "neuromancer.dataset": [[7, "module-neuromancer.dataset"], [19, "module-neuromancer.dataset"]], "normalize_01() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.normalize_01"], [19, "neuromancer.dataset.normalize_01"]], "normalize_11() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.normalize_11"], [19, "neuromancer.dataset.normalize_11"]], "normalize_data() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.normalize_data"], [19, "neuromancer.dataset.normalize_data"]], "read_file() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.read_file"], [19, "neuromancer.dataset.read_file"]], "shuffle() (neuromancer.dataset.graphdataset method)": [[7, "neuromancer.dataset.GraphDataset.shuffle"], [19, "neuromancer.dataset.GraphDataset.shuffle"]], "split_sequence_data() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.split_sequence_data"], [19, "neuromancer.dataset.split_sequence_data"]], "split_static_data() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.split_static_data"], [19, "neuromancer.dataset.split_static_data"]], "standardize() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.standardize"], [19, "neuromancer.dataset.standardize"]], "unbatch_tensor() (in module neuromancer.dataset)": [[7, "neuromancer.dataset.unbatch_tensor"], [19, "neuromancer.dataset.unbatch_tensor"]], "neuromancer.dynamics": [[8, "module-neuromancer.dynamics"], [20, "module-neuromancer.dynamics"]], "gradient() (in module neuromancer.gradients)": [[11, "neuromancer.gradients.gradient"], [19, "neuromancer.gradients.gradient"]], "jacobian() (in module neuromancer.gradients)": [[11, "neuromancer.gradients.jacobian"], [19, "neuromancer.gradients.jacobian"]], "neuromancer.gradients": [[11, "module-neuromancer.gradients"], [19, "module-neuromancer.gradients"]], "basiclogger (class in neuromancer.loggers)": [[15, "neuromancer.loggers.BasicLogger"], [19, "neuromancer.loggers.BasicLogger"]], "mlflowlogger (class in neuromancer.loggers)": [[15, "neuromancer.loggers.MLFlowLogger"], [19, "neuromancer.loggers.MLFlowLogger"]], "clean_up() (neuromancer.loggers.basiclogger method)": [[15, "neuromancer.loggers.BasicLogger.clean_up"], [19, "neuromancer.loggers.BasicLogger.clean_up"]], "clean_up() (neuromancer.loggers.mlflowlogger method)": [[15, "neuromancer.loggers.MLFlowLogger.clean_up"], [19, "neuromancer.loggers.MLFlowLogger.clean_up"]], "log_artifacts() (neuromancer.loggers.basiclogger method)": [[15, "neuromancer.loggers.BasicLogger.log_artifacts"], [19, "neuromancer.loggers.BasicLogger.log_artifacts"]], "log_artifacts() (neuromancer.loggers.mlflowlogger method)": [[15, "neuromancer.loggers.MLFlowLogger.log_artifacts"], [19, "neuromancer.loggers.MLFlowLogger.log_artifacts"]], "log_metrics() (neuromancer.loggers.basiclogger method)": [[15, "neuromancer.loggers.BasicLogger.log_metrics"], [19, "neuromancer.loggers.BasicLogger.log_metrics"]], "log_metrics() (neuromancer.loggers.mlflowlogger method)": [[15, "neuromancer.loggers.MLFlowLogger.log_metrics"], [19, "neuromancer.loggers.MLFlowLogger.log_metrics"]], "log_parameters() (neuromancer.loggers.basiclogger method)": [[15, "neuromancer.loggers.BasicLogger.log_parameters"], [19, "neuromancer.loggers.BasicLogger.log_parameters"]], "log_parameters() (neuromancer.loggers.mlflowlogger method)": [[15, "neuromancer.loggers.MLFlowLogger.log_parameters"], [19, "neuromancer.loggers.MLFlowLogger.log_parameters"]], "log_weights() (neuromancer.loggers.basiclogger method)": [[15, "neuromancer.loggers.BasicLogger.log_weights"], [19, "neuromancer.loggers.BasicLogger.log_weights"]], "log_weights() (neuromancer.loggers.mlflowlogger method)": [[15, "neuromancer.loggers.MLFlowLogger.log_weights"], [19, "neuromancer.loggers.MLFlowLogger.log_weights"]], "neuromancer.loggers": [[15, "module-neuromancer.loggers"], [19, "module-neuromancer.loggers"]], "aggregateloss (class in neuromancer.loss)": [[16, "neuromancer.loss.AggregateLoss"], [19, "neuromancer.loss.AggregateLoss"]], "augmentedlagrangeloss (class in neuromancer.loss)": [[16, "neuromancer.loss.AugmentedLagrangeLoss"], [19, "neuromancer.loss.AugmentedLagrangeLoss"]], "barrierloss (class in neuromancer.loss)": [[16, "neuromancer.loss.BarrierLoss"], [19, "neuromancer.loss.BarrierLoss"]], "penaltyloss (class in neuromancer.loss)": [[16, "neuromancer.loss.PenaltyLoss"], [19, "neuromancer.loss.PenaltyLoss"]], "calculate_constraints() (neuromancer.loss.aggregateloss method)": [[16, "neuromancer.loss.AggregateLoss.calculate_constraints"], [19, "neuromancer.loss.AggregateLoss.calculate_constraints"]], "calculate_constraints() (neuromancer.loss.barrierloss method)": [[16, "neuromancer.loss.BarrierLoss.calculate_constraints"], [19, "neuromancer.loss.BarrierLoss.calculate_constraints"]], "calculate_objectives() (neuromancer.loss.aggregateloss method)": [[16, "neuromancer.loss.AggregateLoss.calculate_objectives"], [19, "neuromancer.loss.AggregateLoss.calculate_objectives"]], "forward() (neuromancer.loss.aggregateloss method)": [[16, "neuromancer.loss.AggregateLoss.forward"], [19, "neuromancer.loss.AggregateLoss.forward"]], "forward() (neuromancer.loss.augmentedlagrangeloss method)": [[16, "neuromancer.loss.AugmentedLagrangeLoss.forward"], [19, "neuromancer.loss.AugmentedLagrangeLoss.forward"]], "forward() (neuromancer.loss.penaltyloss method)": [[16, "neuromancer.loss.PenaltyLoss.forward"], [19, "neuromancer.loss.PenaltyLoss.forward"]], "get_loss() (in module neuromancer.loss)": [[16, "neuromancer.loss.get_loss"], [19, "neuromancer.loss.get_loss"]], "neuromancer.loss": [[16, "module-neuromancer.loss"], [19, "module-neuromancer.loss"]], "animator (class in neuromancer.plot)": [[19, "neuromancer.plot.Animator"]], "movinghorizon (class in neuromancer.system)": [[19, "neuromancer.system.MovingHorizon"]], "node (class in neuromancer.system)": [[19, "neuromancer.system.Node"]], "problem (class in neuromancer.problem)": [[19, "neuromancer.problem.Problem"]], "system (class in neuromancer.system)": [[19, "neuromancer.system.System"]], "trainer (class in neuromancer.trainer)": [[19, "neuromancer.trainer.Trainer"], [36, "neuromancer.trainer.Trainer"]], "visualizer (class in neuromancer.plot)": [[19, "neuromancer.plot.Visualizer"]], "visualizerclosedloop (class in neuromancer.plot)": [[19, "neuromancer.plot.VisualizerClosedLoop"]], "visualizerdobleintegrator (class in neuromancer.plot)": [[19, "neuromancer.plot.VisualizerDobleIntegrator"]], "visualizeropen (class in neuromancer.plot)": [[19, "neuromancer.plot.VisualizerOpen"]], "visualizertrajectories (class in neuromancer.plot)": [[19, "neuromancer.plot.VisualizerTrajectories"]], "visualizeruncertaintyopen (class in neuromancer.plot)": [[19, "neuromancer.plot.VisualizerUncertaintyOpen"]], "cat() (neuromancer.system.system method)": [[19, "neuromancer.system.System.cat"]], "cl_simulate() (in module neuromancer.plot)": [[19, "neuromancer.plot.cl_simulate"]], "eval() (neuromancer.plot.visualizer method)": [[19, "neuromancer.plot.Visualizer.eval"]], "eval() (neuromancer.plot.visualizerclosedloop method)": [[19, "neuromancer.plot.VisualizerClosedLoop.eval"]], "eval() (neuromancer.plot.visualizerdobleintegrator method)": [[19, "neuromancer.plot.VisualizerDobleIntegrator.eval"]], "eval() (neuromancer.plot.visualizeropen method)": [[19, "neuromancer.plot.VisualizerOpen.eval"]], "eval() (neuromancer.plot.visualizertrajectories method)": [[19, "neuromancer.plot.VisualizerTrajectories.eval"]], "eval() (neuromancer.plot.visualizeruncertaintyopen method)": [[19, "neuromancer.plot.VisualizerUncertaintyOpen.eval"]], "evaluate() (neuromancer.trainer.trainer method)": [[19, "neuromancer.trainer.Trainer.evaluate"], [36, "neuromancer.trainer.Trainer.evaluate"]], "find_mat() (neuromancer.plot.animator method)": [[19, "neuromancer.plot.Animator.find_mat"]], "forward() (neuromancer.problem.problem method)": [[19, "neuromancer.problem.Problem.forward"]], "forward() (neuromancer.system.movinghorizon method)": [[19, "neuromancer.system.MovingHorizon.forward"]], "forward() (neuromancer.system.node method)": [[19, "neuromancer.system.Node.forward"]], "forward() (neuromancer.system.system method)": [[19, "neuromancer.system.System.forward"]], "get_colors() (in module neuromancer.plot)": [[19, "neuromancer.plot.get_colors"]], "graph() (neuromancer.problem.problem method)": [[19, "neuromancer.problem.Problem.graph"]], "graph() (neuromancer.system.system method)": [[19, "neuromancer.system.System.graph"]], "init() (neuromancer.system.system method)": [[19, "neuromancer.system.System.init"]], "make_and_save() (neuromancer.plot.animator method)": [[19, "neuromancer.plot.Animator.make_and_save"]], "move_batch_to_device() (in module neuromancer.trainer)": [[19, "neuromancer.trainer.move_batch_to_device"], [36, "neuromancer.trainer.move_batch_to_device"]], "neuromancer": [[19, "module-neuromancer"]], "neuromancer.plot": [[19, "module-neuromancer.plot"]], "neuromancer.problem": [[19, "module-neuromancer.problem"]], "neuromancer.system": [[19, "module-neuromancer.system"]], "neuromancer.trainer": [[19, "module-neuromancer.trainer"], [36, "module-neuromancer.trainer"]], "plot_cl() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_cl"]], "plot_cl_train() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_cl_train"]], "plot_loss_dpc() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_loss_DPC"]], "plot_loss_mpp() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_loss_mpp"]], "plot_matrices() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_matrices"]], "plot_matrix() (neuromancer.plot.visualizerclosedloop method)": [[19, "neuromancer.plot.VisualizerClosedLoop.plot_matrix"]], "plot_matrix() (neuromancer.plot.visualizeropen method)": [[19, "neuromancer.plot.VisualizerOpen.plot_matrix"]], "plot_model_graph() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_model_graph"]], "plot_policy() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_policy"]], "plot_policy_train() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_policy_train"]], "plot_solution_mpp() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_solution_mpp"]], "plot_traj() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_traj"]], "plot_traj() (neuromancer.plot.visualizeropen method)": [[19, "neuromancer.plot.VisualizerOpen.plot_traj"]], "plot_traj() (neuromancer.plot.visualizeruncertaintyopen method)": [[19, "neuromancer.plot.VisualizerUncertaintyOpen.plot_traj"]], "plot_trajectories() (in module neuromancer.plot)": [[19, "neuromancer.plot.plot_trajectories"]], "pltcl() (in module neuromancer.plot)": [[19, "neuromancer.plot.pltCL"]], "pltcorrelate() (in module neuromancer.plot)": [[19, "neuromancer.plot.pltCorrelate"]], "pltol() (in module neuromancer.plot)": [[19, "neuromancer.plot.pltOL"]], "pltphase() (in module neuromancer.plot)": [[19, "neuromancer.plot.pltPhase"]], "pltrecurrence() (in module neuromancer.plot)": [[19, "neuromancer.plot.pltRecurrence"]], "show() (neuromancer.problem.problem method)": [[19, "neuromancer.problem.Problem.show"]], "show() (neuromancer.system.system method)": [[19, "neuromancer.system.System.show"]], "step() (neuromancer.problem.problem method)": [[19, "neuromancer.problem.Problem.step"]], "test() (neuromancer.trainer.trainer method)": [[19, "neuromancer.trainer.Trainer.test"], [36, "neuromancer.trainer.Trainer.test"]], "train() (neuromancer.trainer.trainer method)": [[19, "neuromancer.trainer.Trainer.train"], [36, "neuromancer.trainer.Trainer.train"]], "train_output() (neuromancer.plot.visualizer method)": [[19, "neuromancer.plot.Visualizer.train_output"]], "train_output() (neuromancer.plot.visualizerdobleintegrator method)": [[19, "neuromancer.plot.VisualizerDobleIntegrator.train_output"]], "train_output() (neuromancer.plot.visualizeropen method)": [[19, "neuromancer.plot.VisualizerOpen.train_output"]], "train_plot() (neuromancer.plot.visualizer method)": [[19, "neuromancer.plot.Visualizer.train_plot"]], "train_plot() (neuromancer.plot.visualizeropen method)": [[19, "neuromancer.plot.VisualizerOpen.train_plot"]], "training (neuromancer.constraint.variable attribute)": [[19, "neuromancer.constraint.Variable.training"]], "trajectory_movie() (in module neuromancer.plot)": [[19, "neuromancer.plot.trajectory_movie"]], "agent (class in neuromancer.dynamics.physics)": [[20, "neuromancer.dynamics.physics.Agent"]], "brusselatorhybrid (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.BrusselatorHybrid"]], "brusselatorparam (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.BrusselatorParam"]], "cstr_param (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.CSTR_Param"]], "deltatemp (class in neuromancer.dynamics.physics)": [[20, "neuromancer.dynamics.physics.DeltaTemp"]], "deltatempswitch (class in neuromancer.dynamics.physics)": [[20, "neuromancer.dynamics.physics.DeltaTempSwitch"]], "diffeqintegrator (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.DiffEqIntegrator"]], "duffingparam (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.DuffingParam"]], "euler (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.Euler"]], "euler_trap (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.Euler_Trap"]], "generalnetworkedode (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.GeneralNetworkedODE"]], "hvacconnection (class in neuromancer.dynamics.physics)": [[20, "neuromancer.dynamics.physics.HVACConnection"]], "integrator (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.Integrator"]], "interaction (class in neuromancer.dynamics.physics)": [[20, "neuromancer.dynamics.physics.Interaction"]], "interpolation (class in neuromancer.dynamics.interpolation)": [[20, "neuromancer.dynamics.interpolation.Interpolation"]], "leapfrog (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.LeapFrog"]], "lininterp_offline (class in neuromancer.dynamics.interpolation)": [[20, "neuromancer.dynamics.interpolation.LinInterp_Offline"]], "lininterp_online (class in neuromancer.dynamics.interpolation)": [[20, "neuromancer.dynamics.interpolation.LinInterp_Online"]], "lorenzcontrol (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.LorenzControl"]], "lorenzparam (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.LorenzParam"]], "lotkavolterrahybrid (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.LotkaVolterraHybrid"]], "lotkavolterraparam (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.LotkaVolterraParam"]], "luther (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.Luther"]], "multistep_predictorcorrector (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.MultiStep_PredictorCorrector"]], "odesystem (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.ODESystem"]], "rcnode (class in neuromancer.dynamics.physics)": [[20, "neuromancer.dynamics.physics.RCNode"]], "rk2 (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.RK2"]], "rk4 (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.RK4"]], "rk4_trap (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.RK4_Trap"]], "runge_kutta_fehlberg (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.Runge_Kutta_Fehlberg"]], "ssm (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.SSM"]], "sourcesink (class in neuromancer.dynamics.physics)": [[20, "neuromancer.dynamics.physics.SourceSink"]], "twotankparam (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.TwoTankParam"]], "vanderpolcontrol (class in neuromancer.dynamics.ode)": [[20, "neuromancer.dynamics.ode.VanDerPolControl"]], "yoshida4 (class in neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.Yoshida4"]], "coupling_physics() (neuromancer.dynamics.ode.generalnetworkedode method)": [[20, "neuromancer.dynamics.ode.GeneralNetworkedODE.coupling_physics"]], "forward() (neuromancer.dynamics.integrators.integrator method)": [[20, "neuromancer.dynamics.integrators.Integrator.forward"]], "forward() (neuromancer.dynamics.ode.odesystem method)": [[20, "neuromancer.dynamics.ode.ODESystem.forward"]], "forward() (neuromancer.dynamics.ode.ssm method)": [[20, "neuromancer.dynamics.ode.SSM.forward"]], "forward() (neuromancer.dynamics.physics.agent method)": [[20, "neuromancer.dynamics.physics.Agent.forward"]], "forward() (neuromancer.dynamics.physics.interaction method)": [[20, "neuromancer.dynamics.physics.Interaction.forward"]], "integrate() (neuromancer.dynamics.integrators.diffeqintegrator method)": [[20, "neuromancer.dynamics.integrators.DiffEqIntegrator.integrate"]], "integrate() (neuromancer.dynamics.integrators.euler method)": [[20, "neuromancer.dynamics.integrators.Euler.integrate"]], "integrate() (neuromancer.dynamics.integrators.euler_trap method)": [[20, "neuromancer.dynamics.integrators.Euler_Trap.integrate"]], "integrate() (neuromancer.dynamics.integrators.integrator method)": [[20, "neuromancer.dynamics.integrators.Integrator.integrate"]], "integrate() (neuromancer.dynamics.integrators.leapfrog method)": [[20, "neuromancer.dynamics.integrators.LeapFrog.integrate"]], "integrate() (neuromancer.dynamics.integrators.luther method)": [[20, "neuromancer.dynamics.integrators.Luther.integrate"]], "integrate() (neuromancer.dynamics.integrators.multistep_predictorcorrector method)": [[20, "neuromancer.dynamics.integrators.MultiStep_PredictorCorrector.integrate"]], "integrate() (neuromancer.dynamics.integrators.rk2 method)": [[20, "neuromancer.dynamics.integrators.RK2.integrate"]], "integrate() (neuromancer.dynamics.integrators.rk4 method)": [[20, "neuromancer.dynamics.integrators.RK4.integrate"]], "integrate() (neuromancer.dynamics.integrators.rk4_trap method)": [[20, "neuromancer.dynamics.integrators.RK4_Trap.integrate"]], "integrate() (neuromancer.dynamics.integrators.runge_kutta_fehlberg method)": [[20, "neuromancer.dynamics.integrators.Runge_Kutta_Fehlberg.integrate"]], "integrate() (neuromancer.dynamics.integrators.yoshida4 method)": [[20, "neuromancer.dynamics.integrators.Yoshida4.integrate"]], "interact() (neuromancer.dynamics.physics.deltatemp method)": [[20, "neuromancer.dynamics.physics.DeltaTemp.interact"]], "interact() (neuromancer.dynamics.physics.deltatempswitch method)": [[20, "neuromancer.dynamics.physics.DeltaTempSwitch.interact"]], "interact() (neuromancer.dynamics.physics.hvacconnection method)": [[20, "neuromancer.dynamics.physics.HVACConnection.interact"]], "interact() (neuromancer.dynamics.physics.interaction method)": [[20, "neuromancer.dynamics.physics.Interaction.interact"]], "interpolation() (neuromancer.dynamics.interpolation.interpolation method)": [[20, "neuromancer.dynamics.interpolation.Interpolation.interpolation"]], "interpolation() (neuromancer.dynamics.interpolation.lininterp_offline method)": [[20, "neuromancer.dynamics.interpolation.LinInterp_Offline.interpolation"]], "interpolation() (neuromancer.dynamics.interpolation.lininterp_online method)": [[20, "neuromancer.dynamics.interpolation.LinInterp_Online.interpolation"]], "intrinsic() (neuromancer.dynamics.physics.agent method)": [[20, "neuromancer.dynamics.physics.Agent.intrinsic"]], "intrinsic() (neuromancer.dynamics.physics.rcnode method)": [[20, "neuromancer.dynamics.physics.RCNode.intrinsic"]], "intrinsic() (neuromancer.dynamics.physics.sourcesink method)": [[20, "neuromancer.dynamics.physics.SourceSink.intrinsic"]], "intrinsic_physics() (neuromancer.dynamics.ode.generalnetworkedode method)": [[20, "neuromancer.dynamics.ode.GeneralNetworkedODE.intrinsic_physics"]], "make_norm() (in module neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.make_norm"]], "map_from_agents() (in module neuromancer.dynamics.physics)": [[20, "neuromancer.dynamics.physics.map_from_agents"]], "neuromancer.dynamics.integrators": [[20, "module-neuromancer.dynamics.integrators"]], "neuromancer.dynamics.interpolation": [[20, "module-neuromancer.dynamics.interpolation"]], "neuromancer.dynamics.ode": [[20, "module-neuromancer.dynamics.ode"]], "neuromancer.dynamics.physics": [[20, "module-neuromancer.dynamics.physics"]], "ode_equations() (neuromancer.dynamics.ode.brusselatorhybrid method)": [[20, "neuromancer.dynamics.ode.BrusselatorHybrid.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.brusselatorparam method)": [[20, "neuromancer.dynamics.ode.BrusselatorParam.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.cstr_param method)": [[20, "neuromancer.dynamics.ode.CSTR_Param.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.duffingparam method)": [[20, "neuromancer.dynamics.ode.DuffingParam.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.generalnetworkedode method)": [[20, "neuromancer.dynamics.ode.GeneralNetworkedODE.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.lorenzcontrol method)": [[20, "neuromancer.dynamics.ode.LorenzControl.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.lorenzparam method)": [[20, "neuromancer.dynamics.ode.LorenzParam.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.lotkavolterrahybrid method)": [[20, "neuromancer.dynamics.ode.LotkaVolterraHybrid.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.lotkavolterraparam method)": [[20, "neuromancer.dynamics.ode.LotkaVolterraParam.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.odesystem method)": [[20, "neuromancer.dynamics.ode.ODESystem.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.twotankparam method)": [[20, "neuromancer.dynamics.ode.TwoTankParam.ode_equations"]], "ode_equations() (neuromancer.dynamics.ode.vanderpolcontrol method)": [[20, "neuromancer.dynamics.ode.VanDerPolControl.ode_equations"]], "reg_error() (neuromancer.dynamics.integrators.integrator method)": [[20, "neuromancer.dynamics.integrators.Integrator.reg_error"]], "rms_norm() (in module neuromancer.dynamics.integrators)": [[20, "neuromancer.dynamics.integrators.rms_norm"]], "aplu (class in neuromancer.modules.activations)": [[21, "neuromancer.modules.activations.APLU"]], "blu (class in neuromancer.modules.activations)": [[21, "neuromancer.modules.activations.BLU"]], "basislinear (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.BasisLinear"]], "bilineartorch (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.BilinearTorch"]], "block (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.Block"]], "dropout (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.Dropout"]], "gradientprojection (class in neuromancer.modules.solvers)": [[21, "neuromancer.modules.solvers.GradientProjection"]], "inputconvexnn (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.InputConvexNN"]], "interactionembeddingmlp (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.InteractionEmbeddingMLP"]], "interpolateaddmultiply (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.InterpolateAddMultiply"]], "iterativesolver (class in neuromancer.modules.solvers)": [[21, "neuromancer.modules.solvers.IterativeSolver"]], "linear (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.Linear"]], "mlp (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.MLP"]], "mlpdropout (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.MLPDropout"]], "mlp_bounds (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.MLP_bounds"]], "pelu (class in neuromancer.modules.activations)": [[21, "neuromancer.modules.activations.PELU"]], "prelu (class in neuromancer.modules.activations)": [[21, "neuromancer.modules.activations.PReLU"]], "poly2 (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.Poly2"]], "posdef (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.PosDef"]], "pytorchrnn (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.PytorchRNN"]], "rnn (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.RNN"]], "rnn (class in neuromancer.modules.rnn)": [[21, "neuromancer.modules.rnn.RNN"]], "rnncell (class in neuromancer.modules.rnn)": [[21, "neuromancer.modules.rnn.RNNCell"]], "rectifiedsoftexp (class in neuromancer.modules.activations)": [[21, "neuromancer.modules.activations.RectifiedSoftExp"]], "resmlp (class in neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.ResMLP"]], "smoothedrelu (class in neuromancer.modules.activations)": [[21, "neuromancer.modules.activations.SmoothedReLU"]], "softexponential (class in neuromancer.modules.activations)": [[21, "neuromancer.modules.activations.SoftExponential"]], "solver (class in neuromancer.modules.solvers)": [[21, "neuromancer.modules.solvers.Solver"]], "block_eval() (neuromancer.modules.blocks.basislinear method)": [[21, "neuromancer.modules.blocks.BasisLinear.block_eval"]], "block_eval() (neuromancer.modules.blocks.bilineartorch method)": [[21, "neuromancer.modules.blocks.BilinearTorch.block_eval"]], "block_eval() (neuromancer.modules.blocks.block method)": [[21, "neuromancer.modules.blocks.Block.block_eval"]], "block_eval() (neuromancer.modules.blocks.dropout method)": [[21, "neuromancer.modules.blocks.Dropout.block_eval"]], "block_eval() (neuromancer.modules.blocks.inputconvexnn method)": [[21, "neuromancer.modules.blocks.InputConvexNN.block_eval"]], "block_eval() (neuromancer.modules.blocks.linear method)": [[21, "neuromancer.modules.blocks.Linear.block_eval"]], "block_eval() (neuromancer.modules.blocks.mlp method)": [[21, "neuromancer.modules.blocks.MLP.block_eval"]], "block_eval() (neuromancer.modules.blocks.mlpdropout method)": [[21, "neuromancer.modules.blocks.MLPDropout.block_eval"]], "block_eval() (neuromancer.modules.blocks.mlp_bounds method)": [[21, "neuromancer.modules.blocks.MLP_bounds.block_eval"]], "block_eval() (neuromancer.modules.blocks.poly2 method)": [[21, "neuromancer.modules.blocks.Poly2.block_eval"]], "block_eval() (neuromancer.modules.blocks.posdef method)": [[21, "neuromancer.modules.blocks.PosDef.block_eval"]], "block_eval() (neuromancer.modules.blocks.pytorchrnn method)": [[21, "neuromancer.modules.blocks.PytorchRNN.block_eval"]], "block_eval() (neuromancer.modules.blocks.rnn method)": [[21, "neuromancer.modules.blocks.RNN.block_eval"]], "block_eval() (neuromancer.modules.blocks.resmlp method)": [[21, "neuromancer.modules.blocks.ResMLP.block_eval"]], "bound_methods (neuromancer.modules.blocks.mlp_bounds attribute)": [[21, "neuromancer.modules.blocks.MLP_bounds.bound_methods"]], "bounds_clamp() (in module neuromancer.modules.functions)": [[21, "neuromancer.modules.functions.bounds_clamp"]], "bounds_scaling() (in module neuromancer.modules.functions)": [[21, "neuromancer.modules.functions.bounds_scaling"]], "con_values() (neuromancer.modules.solvers.iterativesolver method)": [[21, "neuromancer.modules.solvers.IterativeSolver.con_values"]], "con_viol_energy() (neuromancer.modules.solvers.gradientprojection method)": [[21, "neuromancer.modules.solvers.GradientProjection.con_viol_energy"]], "forward() (neuromancer.modules.activations.aplu method)": [[21, "neuromancer.modules.activations.APLU.forward"]], "forward() (neuromancer.modules.activations.blu method)": [[21, "neuromancer.modules.activations.BLU.forward"]], "forward() (neuromancer.modules.activations.pelu method)": [[21, "neuromancer.modules.activations.PELU.forward"]], "forward() (neuromancer.modules.activations.prelu method)": [[21, "neuromancer.modules.activations.PReLU.forward"]], "forward() (neuromancer.modules.activations.rectifiedsoftexp method)": [[21, "neuromancer.modules.activations.RectifiedSoftExp.forward"]], "forward() (neuromancer.modules.activations.smoothedrelu method)": [[21, "neuromancer.modules.activations.SmoothedReLU.forward"]], "forward() (neuromancer.modules.activations.softexponential method)": [[21, "neuromancer.modules.activations.SoftExponential.forward"]], "forward() (neuromancer.modules.blocks.block method)": [[21, "neuromancer.modules.blocks.Block.forward"]], "forward() (neuromancer.modules.blocks.interactionembeddingmlp method)": [[21, "neuromancer.modules.blocks.InteractionEmbeddingMLP.forward"]], "forward() (neuromancer.modules.blocks.interpolateaddmultiply method)": [[21, "neuromancer.modules.blocks.InterpolateAddMultiply.forward"]], "forward() (neuromancer.modules.rnn.rnn method)": [[21, "neuromancer.modules.rnn.RNN.forward"]], "forward() (neuromancer.modules.rnn.rnncell method)": [[21, "neuromancer.modules.rnn.RNNCell.forward"]], "forward() (neuromancer.modules.solvers.gradientprojection method)": [[21, "neuromancer.modules.solvers.GradientProjection.forward"]], "forward() (neuromancer.modules.solvers.iterativesolver method)": [[21, "neuromancer.modules.solvers.IterativeSolver.forward"]], "forward() (neuromancer.modules.solvers.solver method)": [[21, "neuromancer.modules.solvers.Solver.forward"]], "neuromancer.modules": [[21, "module-neuromancer.modules"]], "neuromancer.modules.activations": [[21, "module-neuromancer.modules.activations"]], "neuromancer.modules.blocks": [[21, "module-neuromancer.modules.blocks"]], "neuromancer.modules.functions": [[21, "module-neuromancer.modules.functions"]], "neuromancer.modules.rnn": [[21, "module-neuromancer.modules.rnn"]], "neuromancer.modules.solvers": [[21, "module-neuromancer.modules.solvers"]], "newton_step() (neuromancer.modules.solvers.iterativesolver method)": [[21, "neuromancer.modules.solvers.IterativeSolver.newton_step"]], "num_steps (neuromancer.modules.solvers.iterativesolver property)": [[21, "neuromancer.modules.solvers.IterativeSolver.num_steps"]], "reg_error() (neuromancer.modules.activations.aplu method)": [[21, "neuromancer.modules.activations.APLU.reg_error"]], "reg_error() (neuromancer.modules.blocks.basislinear method)": [[21, "neuromancer.modules.blocks.BasisLinear.reg_error"]], "reg_error() (neuromancer.modules.blocks.bilineartorch method)": [[21, "neuromancer.modules.blocks.BilinearTorch.reg_error"]], "reg_error() (neuromancer.modules.blocks.interactionembeddingmlp method)": [[21, "neuromancer.modules.blocks.InteractionEmbeddingMLP.reg_error"]], "reg_error() (neuromancer.modules.blocks.linear method)": [[21, "neuromancer.modules.blocks.Linear.reg_error"]], "reg_error() (neuromancer.modules.blocks.mlp method)": [[21, "neuromancer.modules.blocks.MLP.reg_error"]], "reg_error() (neuromancer.modules.blocks.mlpdropout method)": [[21, "neuromancer.modules.blocks.MLPDropout.reg_error"]], "reg_error() (neuromancer.modules.blocks.pytorchrnn method)": [[21, "neuromancer.modules.blocks.PytorchRNN.reg_error"]], "reg_error() (neuromancer.modules.blocks.rnn method)": [[21, "neuromancer.modules.blocks.RNN.reg_error"]], "reg_error() (neuromancer.modules.rnn.rnn method)": [[21, "neuromancer.modules.rnn.RNN.reg_error"]], "reg_error() (neuromancer.modules.rnn.rnncell method)": [[21, "neuromancer.modules.rnn.RNNCell.reg_error"]], "relu_clamp() (in module neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.relu_clamp"]], "reset() (neuromancer.modules.blocks.rnn method)": [[21, "neuromancer.modules.blocks.RNN.reset"]], "set_model_dropout_mode() (in module neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.set_model_dropout_mode"]], "sigmoid_scale() (in module neuromancer.modules.blocks)": [[21, "neuromancer.modules.blocks.sigmoid_scale"]], "soft_exp() (in module neuromancer.modules.activations)": [[21, "neuromancer.modules.activations.soft_exp"]], "actuator (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.Actuator"]], "autoignition (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.Autoignition"]], "backend (class in neuromancer.psl.base)": [[22, "neuromancer.psl.base.Backend"]], "boids (class in neuromancer.psl.coupled_systems)": [[22, "neuromancer.psl.coupled_systems.Boids"]], "brusselator1d (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.Brusselator1D"]], "buildingenvelope (class in neuromancer.psl.building_envelope)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope"]], "cstr (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.CSTR"]], "chuacircuit (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.ChuaCircuit"]], "coupled_nonautonomous (class in neuromancer.psl.coupled_systems)": [[22, "neuromancer.psl.coupled_systems.Coupled_NonAutonomous"]], "coupled_ode (class in neuromancer.psl.coupled_systems)": [[22, "neuromancer.psl.coupled_systems.Coupled_ODE"]], "doublependulum (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.DoublePendulum"]], "duffing (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.Duffing"]], "duffingcontrol (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.DuffingControl"]], "emulatorbase (class in neuromancer.psl.base)": [[22, "neuromancer.psl.base.EmulatorBase"]], "equationwrapper (class in neuromancer.psl.base)": [[22, "neuromancer.psl.base.EquationWrapper"]], "fileemulator (class in neuromancer.psl.file_emulator)": [[22, "neuromancer.psl.file_emulator.FileEmulator"]], "gravitational_system (class in neuromancer.psl.coupled_systems)": [[22, "neuromancer.psl.coupled_systems.Gravitational_System"]], "hindmarshrose (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.HindmarshRose"]], "invpendulum (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.InvPendulum"]], "iversimple (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.IverSimple"]], "linearbuildingenvelope (class in neuromancer.psl.building_envelope)": [[22, "neuromancer.psl.building_envelope.LinearBuildingEnvelope"]], "lorenzcontrol (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.LorenzControl"]], "lorenzsystem (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.LorenzSystem"]], "lotkavolterra (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.LotkaVolterra"]], "ode_autonomous (class in neuromancer.psl.base)": [[22, "neuromancer.psl.base.ODE_Autonomous"]], "ode_nonautonomous (class in neuromancer.psl.base)": [[22, "neuromancer.psl.base.ODE_NonAutonomous"]], "pendulum (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.Pendulum"]], "periodic() (in module neuromancer.psl.perturb)": [[22, "neuromancer.psl.perturb.Periodic"]], "rc_network (class in neuromancer.psl.coupled_systems)": [[22, "neuromancer.psl.coupled_systems.RC_Network"]], "randomwalk() (in module neuromancer.psl.perturb)": [[22, "neuromancer.psl.perturb.RandomWalk"]], "rosslerattractor (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.RosslerAttractor"]], "seir_population (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.SEIR_population"]], "sawtooth() (in module neuromancer.psl.perturb)": [[22, "neuromancer.psl.perturb.Sawtooth"]], "splinesignal() (in module neuromancer.psl.perturb)": [[22, "neuromancer.psl.perturb.SplineSignal"]], "standardscaler (class in neuromancer.psl.norms)": [[22, "neuromancer.psl.norms.StandardScaler"]], "step() (in module neuromancer.psl.perturb)": [[22, "neuromancer.psl.perturb.Step"]], "steps() (in module neuromancer.psl.perturb)": [[22, "neuromancer.psl.perturb.Steps"]], "swingequation (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.SwingEquation"]], "t_dist_idx (neuromancer.psl.building_envelope.buildingenvelope attribute)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.T_dist_idx"]], "tank (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.Tank"]], "thomasattractor (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.ThomasAttractor"]], "thomasattractorcontrol (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.ThomasAttractorControl"]], "twotank (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.TwoTank"]], "universaloscillator (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.UniversalOscillator"]], "vanderpol (class in neuromancer.psl.autonomous)": [[22, "neuromancer.psl.autonomous.VanDerPol"]], "vanderpolcontrol (class in neuromancer.psl.nonautonomous)": [[22, "neuromancer.psl.nonautonomous.VanDerPolControl"]], "whitenoise() (in module neuromancer.psl.perturb)": [[22, "neuromancer.psl.perturb.WhiteNoise"]], "add_missing_parameters() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.add_missing_parameters"]], "add_missing_parameters() (neuromancer.psl.base.ode_nonautonomous method)": [[22, "neuromancer.psl.base.ODE_NonAutonomous.add_missing_parameters"]], "arma() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.arma"]], "backends (neuromancer.psl.base.backend attribute)": [[22, "neuromancer.psl.base.Backend.backends"]], "beta() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.beta"]], "beta_walk_max_step() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.beta_walk_max_step"]], "beta_walk_mean() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.beta_walk_mean"]], "cast_backend() (in module neuromancer.psl.base)": [[22, "neuromancer.psl.base.cast_backend"]], "change_backend() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.change_backend"]], "denormalize() (in module neuromancer.psl.norms)": [[22, "neuromancer.psl.norms.denormalize"]], "denormalize() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.denormalize"]], "download() (in module neuromancer.psl.base)": [[22, "neuromancer.psl.base.download"]], "equations() (neuromancer.psl.autonomous.autoignition method)": [[22, "neuromancer.psl.autonomous.Autoignition.equations"]], "equations() (neuromancer.psl.autonomous.brusselator1d method)": [[22, "neuromancer.psl.autonomous.Brusselator1D.equations"]], "equations() (neuromancer.psl.autonomous.chuacircuit method)": [[22, "neuromancer.psl.autonomous.ChuaCircuit.equations"]], "equations() (neuromancer.psl.autonomous.doublependulum method)": [[22, "neuromancer.psl.autonomous.DoublePendulum.equations"]], "equations() (neuromancer.psl.autonomous.duffing method)": [[22, "neuromancer.psl.autonomous.Duffing.equations"]], "equations() (neuromancer.psl.autonomous.lorenzsystem method)": [[22, "neuromancer.psl.autonomous.LorenzSystem.equations"]], "equations() (neuromancer.psl.autonomous.lotkavolterra method)": [[22, "neuromancer.psl.autonomous.LotkaVolterra.equations"]], "equations() (neuromancer.psl.autonomous.pendulum method)": [[22, "neuromancer.psl.autonomous.Pendulum.equations"]], "equations() (neuromancer.psl.autonomous.rosslerattractor method)": [[22, "neuromancer.psl.autonomous.RosslerAttractor.equations"]], "equations() (neuromancer.psl.autonomous.thomasattractor method)": [[22, "neuromancer.psl.autonomous.ThomasAttractor.equations"]], "equations() (neuromancer.psl.autonomous.universaloscillator method)": [[22, "neuromancer.psl.autonomous.UniversalOscillator.equations"]], "equations() (neuromancer.psl.autonomous.vanderpol method)": [[22, "neuromancer.psl.autonomous.VanDerPol.equations"]], "equations() (neuromancer.psl.base.ode_autonomous method)": [[22, "neuromancer.psl.base.ODE_Autonomous.equations"]], "equations() (neuromancer.psl.base.ode_nonautonomous method)": [[22, "neuromancer.psl.base.ODE_NonAutonomous.equations"]], "equations() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.equations"]], "equations() (neuromancer.psl.coupled_systems.boids method)": [[22, "neuromancer.psl.coupled_systems.Boids.equations"]], "equations() (neuromancer.psl.coupled_systems.coupled_nonautonomous method)": [[22, "neuromancer.psl.coupled_systems.Coupled_NonAutonomous.equations"]], "equations() (neuromancer.psl.coupled_systems.coupled_ode method)": [[22, "neuromancer.psl.coupled_systems.Coupled_ODE.equations"]], "equations() (neuromancer.psl.coupled_systems.gravitational_system method)": [[22, "neuromancer.psl.coupled_systems.Gravitational_System.equations"]], "equations() (neuromancer.psl.coupled_systems.rc_network method)": [[22, "neuromancer.psl.coupled_systems.RC_Network.equations"]], "equations() (neuromancer.psl.nonautonomous.actuator method)": [[22, "neuromancer.psl.nonautonomous.Actuator.equations"]], "equations() (neuromancer.psl.nonautonomous.cstr method)": [[22, "neuromancer.psl.nonautonomous.CSTR.equations"]], "equations() (neuromancer.psl.nonautonomous.duffingcontrol method)": [[22, "neuromancer.psl.nonautonomous.DuffingControl.equations"]], "equations() (neuromancer.psl.nonautonomous.hindmarshrose method)": [[22, "neuromancer.psl.nonautonomous.HindmarshRose.equations"]], "equations() (neuromancer.psl.nonautonomous.invpendulum method)": [[22, "neuromancer.psl.nonautonomous.InvPendulum.equations"]], "equations() (neuromancer.psl.nonautonomous.iversimple method)": [[22, "neuromancer.psl.nonautonomous.IverSimple.equations"]], "equations() (neuromancer.psl.nonautonomous.lorenzcontrol method)": [[22, "neuromancer.psl.nonautonomous.LorenzControl.equations"]], "equations() (neuromancer.psl.nonautonomous.seir_population method)": [[22, "neuromancer.psl.nonautonomous.SEIR_population.equations"]], "equations() (neuromancer.psl.nonautonomous.swingequation method)": [[22, "neuromancer.psl.nonautonomous.SwingEquation.equations"]], "equations() (neuromancer.psl.nonautonomous.tank method)": [[22, "neuromancer.psl.nonautonomous.Tank.equations"]], "equations() (neuromancer.psl.nonautonomous.thomasattractorcontrol method)": [[22, "neuromancer.psl.nonautonomous.ThomasAttractorControl.equations"]], "equations() (neuromancer.psl.nonautonomous.twotank method)": [[22, "neuromancer.psl.nonautonomous.TwoTank.equations"]], "equations() (neuromancer.psl.nonautonomous.vanderpolcontrol method)": [[22, "neuromancer.psl.nonautonomous.VanDerPolControl.equations"]], "find_nearest() (neuromancer.psl.file_emulator.fileemulator method)": [[22, "neuromancer.psl.file_emulator.FileEmulator.find_nearest"]], "forward() (neuromancer.psl.base.ode_autonomous method)": [[22, "neuromancer.psl.base.ODE_Autonomous.forward"]], "forward() (neuromancer.psl.base.ode_nonautonomous method)": [[22, "neuromancer.psl.base.ODE_NonAutonomous.forward"]], "forward() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.forward"]], "get_c() (neuromancer.psl.coupled_systems.rc_network method)": [[22, "neuromancer.psl.coupled_systems.RC_Network.get_C"]], "get_d() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.get_D"]], "get_d_obs() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.get_D_obs"]], "get_r() (neuromancer.psl.base.ode_nonautonomous method)": [[22, "neuromancer.psl.base.ODE_NonAutonomous.get_R"]], "get_r() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.get_R"]], "get_u() (neuromancer.psl.base.ode_nonautonomous method)": [[22, "neuromancer.psl.base.ODE_NonAutonomous.get_U"]], "get_u() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.get_U"]], "get_u() (neuromancer.psl.building_envelope.linearbuildingenvelope method)": [[22, "neuromancer.psl.building_envelope.LinearBuildingEnvelope.get_U"]], "get_u() (neuromancer.psl.coupled_systems.rc_network method)": [[22, "neuromancer.psl.coupled_systems.RC_Network.get_U"]], "get_u() (neuromancer.psl.nonautonomous.actuator method)": [[22, "neuromancer.psl.nonautonomous.Actuator.get_U"]], "get_u() (neuromancer.psl.nonautonomous.cstr method)": [[22, "neuromancer.psl.nonautonomous.CSTR.get_U"]], "get_u() (neuromancer.psl.nonautonomous.duffingcontrol method)": [[22, "neuromancer.psl.nonautonomous.DuffingControl.get_U"]], "get_u() (neuromancer.psl.nonautonomous.hindmarshrose method)": [[22, "neuromancer.psl.nonautonomous.HindmarshRose.get_U"]], "get_u() (neuromancer.psl.nonautonomous.invpendulum method)": [[22, "neuromancer.psl.nonautonomous.InvPendulum.get_U"]], "get_u() (neuromancer.psl.nonautonomous.iversimple method)": [[22, "neuromancer.psl.nonautonomous.IverSimple.get_U"]], "get_u() (neuromancer.psl.nonautonomous.lorenzcontrol method)": [[22, "neuromancer.psl.nonautonomous.LorenzControl.get_U"]], "get_u() (neuromancer.psl.nonautonomous.seir_population method)": [[22, "neuromancer.psl.nonautonomous.SEIR_population.get_U"]], "get_u() (neuromancer.psl.nonautonomous.swingequation method)": [[22, "neuromancer.psl.nonautonomous.SwingEquation.get_U"]], "get_u() (neuromancer.psl.nonautonomous.tank method)": [[22, "neuromancer.psl.nonautonomous.Tank.get_U"]], "get_u() (neuromancer.psl.nonautonomous.thomasattractorcontrol method)": [[22, "neuromancer.psl.nonautonomous.ThomasAttractorControl.get_U"]], "get_u() (neuromancer.psl.nonautonomous.twotank method)": [[22, "neuromancer.psl.nonautonomous.TwoTank.get_U"]], "get_u() (neuromancer.psl.nonautonomous.vanderpolcontrol method)": [[22, "neuromancer.psl.nonautonomous.VanDerPolControl.get_U"]], "get_batch() (neuromancer.psl.file_emulator.fileemulator method)": [[22, "neuromancer.psl.file_emulator.FileEmulator.get_batch"]], "get_colors() (in module neuromancer.psl.plot)": [[22, "neuromancer.psl.plot.get_colors"]], "get_q() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.get_q"]], "get_q() (neuromancer.psl.building_envelope.linearbuildingenvelope method)": [[22, "neuromancer.psl.building_envelope.LinearBuildingEnvelope.get_q"]], "get_resistances() (neuromancer.psl.coupled_systems.rc_network method)": [[22, "neuromancer.psl.coupled_systems.RC_Network.get_resistances"]], "get_simulation_args() (neuromancer.psl.base.ode_nonautonomous method)": [[22, "neuromancer.psl.base.ODE_NonAutonomous.get_simulation_args"]], "get_simulation_args() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.get_simulation_args"]], "get_x0() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.get_x0"]], "get_x0() (neuromancer.psl.coupled_systems.boids method)": [[22, "neuromancer.psl.coupled_systems.Boids.get_x0"]], "get_x0() (neuromancer.psl.coupled_systems.gravitational_system method)": [[22, "neuromancer.psl.coupled_systems.Gravitational_System.get_x0"]], "get_x0() (neuromancer.psl.coupled_systems.rc_network method)": [[22, "neuromancer.psl.coupled_systems.RC_Network.get_x0"]], "get_x0() (neuromancer.psl.nonautonomous.cstr method)": [[22, "neuromancer.psl.nonautonomous.CSTR.get_x0"]], "get_x0() (neuromancer.psl.nonautonomous.tank method)": [[22, "neuromancer.psl.nonautonomous.Tank.get_x0"]], "get_x0() (neuromancer.psl.nonautonomous.twotank method)": [[22, "neuromancer.psl.nonautonomous.TwoTank.get_x0"]], "get_xy() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.get_xy"]], "grad() (in module neuromancer.psl.base)": [[22, "neuromancer.psl.base.grad"]], "inverse_transform() (neuromancer.psl.norms.standardscaler method)": [[22, "neuromancer.psl.norms.StandardScaler.inverse_transform"]], "make_4_body() (neuromancer.psl.coupled_systems.gravitational_system static method)": [[22, "neuromancer.psl.coupled_systems.Gravitational_System.make_4_body"]], "make_5_room() (neuromancer.psl.coupled_systems.rc_network static method)": [[22, "neuromancer.psl.coupled_systems.RC_Network.make_5_room"]], "mass_idx (neuromancer.psl.coupled_systems.gravitational_system attribute)": [[22, "neuromancer.psl.coupled_systems.Gravitational_System.mass_idx"]], "message_passing() (neuromancer.psl.coupled_systems.boids method)": [[22, "neuromancer.psl.coupled_systems.Boids.message_passing"]], "message_passing() (neuromancer.psl.coupled_systems.coupled_nonautonomous method)": [[22, "neuromancer.psl.coupled_systems.Coupled_NonAutonomous.message_passing"]], "message_passing() (neuromancer.psl.coupled_systems.coupled_ode method)": [[22, "neuromancer.psl.coupled_systems.Coupled_ODE.message_passing"]], "message_passing() (neuromancer.psl.coupled_systems.gravitational_system method)": [[22, "neuromancer.psl.coupled_systems.Gravitational_System.message_passing"]], "message_passing() (neuromancer.psl.coupled_systems.rc_network method)": [[22, "neuromancer.psl.coupled_systems.RC_Network.message_passing"]], "multidim() (in module neuromancer.psl.coupled_systems)": [[22, "neuromancer.psl.coupled_systems.multidim"]], "nd_walk() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.nd_walk"]], "neuromancer.psl": [[22, "module-neuromancer.psl"]], "neuromancer.psl.autonomous": [[22, "module-neuromancer.psl.autonomous"]], "neuromancer.psl.base": [[22, "module-neuromancer.psl.base"]], "neuromancer.psl.building_envelope": [[22, "module-neuromancer.psl.building_envelope"]], "neuromancer.psl.coupled_systems": [[22, "module-neuromancer.psl.coupled_systems"]], "neuromancer.psl.file_emulator": [[22, "module-neuromancer.psl.file_emulator"]], "neuromancer.psl.nonautonomous": [[22, "module-neuromancer.psl.nonautonomous"]], "neuromancer.psl.norms": [[22, "module-neuromancer.psl.norms"]], "neuromancer.psl.perturb": [[22, "module-neuromancer.psl.perturb"]], "neuromancer.psl.plot": [[22, "module-neuromancer.psl.plot"]], "neuromancer.psl.signals": [[22, "module-neuromancer.psl.signals"]], "neuromancer.psl.system_emulator": [[22, "module-neuromancer.psl.system_emulator"]], "noise() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.noise"]], "normalize() (in module neuromancer.psl.norms)": [[22, "neuromancer.psl.norms.normalize"]], "normalize() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.normalize"]], "normalize_max() (neuromancer.psl.coupled_systems.boids method)": [[22, "neuromancer.psl.coupled_systems.Boids.normalize_max"]], "np_softmax() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.np_softmax"]], "numpy_backend (neuromancer.psl.base.backend attribute)": [[22, "neuromancer.psl.base.Backend.numpy_backend"]], "params (neuromancer.psl.autonomous.autoignition property)": [[22, "neuromancer.psl.autonomous.Autoignition.params"]], "params (neuromancer.psl.autonomous.brusselator1d property)": [[22, "neuromancer.psl.autonomous.Brusselator1D.params"]], "params (neuromancer.psl.autonomous.chuacircuit property)": [[22, "neuromancer.psl.autonomous.ChuaCircuit.params"]], "params (neuromancer.psl.autonomous.doublependulum property)": [[22, "neuromancer.psl.autonomous.DoublePendulum.params"]], "params (neuromancer.psl.autonomous.duffing property)": [[22, "neuromancer.psl.autonomous.Duffing.params"]], "params (neuromancer.psl.autonomous.lorenzsystem property)": [[22, "neuromancer.psl.autonomous.LorenzSystem.params"]], "params (neuromancer.psl.autonomous.lotkavolterra property)": [[22, "neuromancer.psl.autonomous.LotkaVolterra.params"]], "params (neuromancer.psl.autonomous.pendulum property)": [[22, "neuromancer.psl.autonomous.Pendulum.params"]], "params (neuromancer.psl.autonomous.rosslerattractor property)": [[22, "neuromancer.psl.autonomous.RosslerAttractor.params"]], "params (neuromancer.psl.autonomous.thomasattractor property)": [[22, "neuromancer.psl.autonomous.ThomasAttractor.params"]], "params (neuromancer.psl.autonomous.universaloscillator property)": [[22, "neuromancer.psl.autonomous.UniversalOscillator.params"]], "params (neuromancer.psl.autonomous.vanderpol property)": [[22, "neuromancer.psl.autonomous.VanDerPol.params"]], "params (neuromancer.psl.base.emulatorbase property)": [[22, "neuromancer.psl.base.EmulatorBase.params"]], "params (neuromancer.psl.building_envelope.buildingenvelope property)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.params"]], "params (neuromancer.psl.coupled_systems.coupled_nonautonomous property)": [[22, "neuromancer.psl.coupled_systems.Coupled_NonAutonomous.params"]], "params (neuromancer.psl.coupled_systems.coupled_ode property)": [[22, "neuromancer.psl.coupled_systems.Coupled_ODE.params"]], "params (neuromancer.psl.file_emulator.fileemulator property)": [[22, "neuromancer.psl.file_emulator.FileEmulator.params"]], "params (neuromancer.psl.nonautonomous.actuator property)": [[22, "neuromancer.psl.nonautonomous.Actuator.params"]], "params (neuromancer.psl.nonautonomous.cstr property)": [[22, "neuromancer.psl.nonautonomous.CSTR.params"]], "params (neuromancer.psl.nonautonomous.duffingcontrol property)": [[22, "neuromancer.psl.nonautonomous.DuffingControl.params"]], "params (neuromancer.psl.nonautonomous.hindmarshrose property)": [[22, "neuromancer.psl.nonautonomous.HindmarshRose.params"]], "params (neuromancer.psl.nonautonomous.invpendulum property)": [[22, "neuromancer.psl.nonautonomous.InvPendulum.params"]], "params (neuromancer.psl.nonautonomous.iversimple property)": [[22, "neuromancer.psl.nonautonomous.IverSimple.params"]], "params (neuromancer.psl.nonautonomous.lorenzcontrol property)": [[22, "neuromancer.psl.nonautonomous.LorenzControl.params"]], "params (neuromancer.psl.nonautonomous.seir_population property)": [[22, "neuromancer.psl.nonautonomous.SEIR_population.params"]], "params (neuromancer.psl.nonautonomous.swingequation property)": [[22, "neuromancer.psl.nonautonomous.SwingEquation.params"]], "params (neuromancer.psl.nonautonomous.tank property)": [[22, "neuromancer.psl.nonautonomous.Tank.params"]], "params (neuromancer.psl.nonautonomous.thomasattractorcontrol property)": [[22, "neuromancer.psl.nonautonomous.ThomasAttractorControl.params"]], "params (neuromancer.psl.nonautonomous.twotank property)": [[22, "neuromancer.psl.nonautonomous.TwoTank.params"]], "params (neuromancer.psl.nonautonomous.vanderpolcontrol property)": [[22, "neuromancer.psl.nonautonomous.VanDerPolControl.params"]], "path (neuromancer.psl.building_envelope.buildingenvelope property)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.path"]], "path (neuromancer.psl.file_emulator.fileemulator property)": [[22, "neuromancer.psl.file_emulator.FileEmulator.path"]], "periodic() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.periodic"]], "pltcl() (in module neuromancer.psl.plot)": [[22, "neuromancer.psl.plot.pltCL"]], "pltcorrelate() (in module neuromancer.psl.plot)": [[22, "neuromancer.psl.plot.pltCorrelate"]], "pltol() (in module neuromancer.psl.plot)": [[22, "neuromancer.psl.plot.pltOL"]], "pltphase() (in module neuromancer.psl.plot)": [[22, "neuromancer.psl.plot.pltPhase"]], "pltrecurrence() (in module neuromancer.psl.plot)": [[22, "neuromancer.psl.plot.pltRecurrence"]], "pos_idx (neuromancer.psl.coupled_systems.boids attribute)": [[22, "neuromancer.psl.coupled_systems.Boids.pos_idx"]], "pos_idx (neuromancer.psl.coupled_systems.gravitational_system attribute)": [[22, "neuromancer.psl.coupled_systems.Gravitational_System.pos_idx"]], "prbs() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.prbs"]], "random_walk() (in module neuromancer.psl.perturb)": [[22, "neuromancer.psl.perturb.random_walk"]], "read_file() (in module neuromancer.psl.file_emulator)": [[22, "neuromancer.psl.file_emulator.read_file"]], "restore_random_state() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.restore_random_state"]], "retrieve_data() (neuromancer.psl.file_emulator.fileemulator method)": [[22, "neuromancer.psl.file_emulator.FileEmulator.retrieve_data"]], "save_random_state() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.save_random_state"]], "set_params() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.set_params"]], "set_stats() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.set_stats"]], "show() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.show"]], "simulate() (neuromancer.psl.base.emulatorbase method)": [[22, "neuromancer.psl.base.EmulatorBase.simulate"]], "simulate() (neuromancer.psl.base.ode_autonomous method)": [[22, "neuromancer.psl.base.ODE_Autonomous.simulate"]], "simulate() (neuromancer.psl.base.ode_nonautonomous method)": [[22, "neuromancer.psl.base.ODE_NonAutonomous.simulate"]], "simulate() (neuromancer.psl.building_envelope.buildingenvelope method)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.simulate"]], "simulate() (neuromancer.psl.coupled_systems.boids method)": [[22, "neuromancer.psl.coupled_systems.Boids.simulate"]], "simulate() (neuromancer.psl.coupled_systems.gravitational_system method)": [[22, "neuromancer.psl.coupled_systems.Gravitational_System.simulate"]], "simulate() (neuromancer.psl.file_emulator.fileemulator method)": [[22, "neuromancer.psl.file_emulator.FileEmulator.simulate"]], "sines() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.sines"]], "spline() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.spline"]], "step() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.step"]], "system_to_psl() (in module neuromancer.psl.system_emulator)": [[22, "neuromancer.psl.system_emulator.system_to_psl"]], "systems (neuromancer.psl.building_envelope.buildingenvelope attribute)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.systems"]], "torch_backend (neuromancer.psl.base.backend attribute)": [[22, "neuromancer.psl.base.Backend.torch_backend"]], "transform() (neuromancer.psl.norms.standardscaler method)": [[22, "neuromancer.psl.norms.StandardScaler.transform"]], "u_fun() (neuromancer.psl.nonautonomous.lorenzcontrol method)": [[22, "neuromancer.psl.nonautonomous.LorenzControl.u_fun"]], "umax (neuromancer.psl.building_envelope.buildingenvelope property)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.umax"]], "umax (neuromancer.psl.building_envelope.linearbuildingenvelope property)": [[22, "neuromancer.psl.building_envelope.LinearBuildingEnvelope.umax"]], "umax (neuromancer.psl.nonautonomous.twotank property)": [[22, "neuromancer.psl.nonautonomous.TwoTank.umax"]], "umin (neuromancer.psl.building_envelope.buildingenvelope property)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.umin"]], "umin (neuromancer.psl.building_envelope.linearbuildingenvelope property)": [[22, "neuromancer.psl.building_envelope.LinearBuildingEnvelope.umin"]], "umin (neuromancer.psl.nonautonomous.twotank property)": [[22, "neuromancer.psl.nonautonomous.TwoTank.umin"]], "url (neuromancer.psl.building_envelope.buildingenvelope property)": [[22, "neuromancer.psl.building_envelope.BuildingEnvelope.url"]], "url (neuromancer.psl.file_emulator.fileemulator property)": [[22, "neuromancer.psl.file_emulator.FileEmulator.url"]], "vel_idx (neuromancer.psl.coupled_systems.boids attribute)": [[22, "neuromancer.psl.coupled_systems.Boids.vel_idx"]], "vel_idx (neuromancer.psl.coupled_systems.gravitational_system attribute)": [[22, "neuromancer.psl.coupled_systems.Gravitational_System.vel_idx"]], "walk() (in module neuromancer.psl.signals)": [[22, "neuromancer.psl.signals.walk"]], "white_noise() (in module neuromancer.psl.perturb)": [[22, "neuromancer.psl.perturb.white_noise"]], "boundednormlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.BoundedNormLinear"]], "butterflylinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.ButterflyLinear"]], "dampedskewsymmetriclinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.DampedSkewSymmetricLinear"]], "gershgorinlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.GershgorinLinear"]], "hprod() (in module neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.Hprod"]], "identitygradrelu (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.IdentityGradReLU"]], "identityinitlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.IdentityInitLinear"]], "identitylinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.IdentityLinear"]], "l0linear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.L0Linear"]], "lassolinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.LassoLinear"]], "lassolinearrelu (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.LassoLinearRELU"]], "leftstochasticlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.LeftStochasticLinear"]], "linear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.Linear"]], "linearbase (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.LinearBase"]], "nonnegativelinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.NonNegativeLinear"]], "orthogonallinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.OrthogonalLinear"]], "psdlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.PSDLinear"]], "perronfrobeniuslinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.PerronFrobeniusLinear"]], "powerboundlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.PowerBoundLinear"]], "rnn (class in neuromancer.slim.rnn)": [[23, "neuromancer.slim.rnn.RNN"]], "rnncell (class in neuromancer.slim.rnn)": [[23, "neuromancer.slim.rnn.RNNCell"]], "rightstochasticlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.RightStochasticLinear"]], "svdlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SVDLinear"]], "svdlinearlearnbounds (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SVDLinearLearnBounds"]], "schurdecompositionlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SchurDecompositionLinear"]], "sigma() (neuromancer.slim.linear.spectrallinear method)": [[23, "neuromancer.slim.linear.SpectralLinear.Sigma"]], "skewsymmetriclinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SkewSymmetricLinear"]], "spectrallinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SpectralLinear"]], "splitlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SplitLinear"]], "squarelinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SquareLinear"]], "stablesplitlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.StableSplitLinear"]], "symmetriclinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SymmetricLinear"]], "symmetricsvdlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SymmetricSVDLinear"]], "symmetricspectrallinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SymmetricSpectralLinear"]], "symplecticlinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.SymplecticLinear"]], "trivialnullspacelinear (class in neuromancer.slim.linear)": [[23, "neuromancer.slim.linear.TrivialNullSpaceLinear"]], "umultiply() (neuromancer.slim.linear.spectrallinear method)": [[23, "neuromancer.slim.linear.SpectralLinear.Umultiply"]], "vmultiply() (neuromancer.slim.linear.spectrallinear method)": [[23, "neuromancer.slim.linear.SpectralLinear.Vmultiply"]], "backward() (neuromancer.slim.linear.identitygradrelu static method)": [[23, "neuromancer.slim.linear.IdentityGradReLU.backward"]], "build_t() (neuromancer.slim.linear.schurdecompositionlinear method)": [[23, "neuromancer.slim.linear.SchurDecompositionLinear.build_T"]], "cdf_qz() (neuromancer.slim.linear.l0linear method)": [[23, "neuromancer.slim.linear.L0Linear.cdf_qz"]], "device (neuromancer.slim.linear.linearbase property)": [[23, "neuromancer.slim.linear.LinearBase.device"]], "effective_w() (neuromancer.slim.linear.butterflylinear method)": [[23, "neuromancer.slim.linear.ButterflyLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.dampedskewsymmetriclinear method)": [[23, "neuromancer.slim.linear.DampedSkewSymmetricLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.gershgorinlinear method)": [[23, "neuromancer.slim.linear.GershgorinLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.l0linear method)": [[23, "neuromancer.slim.linear.L0Linear.effective_W"]], "effective_w() (neuromancer.slim.linear.lassolinear method)": [[23, "neuromancer.slim.linear.LassoLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.lassolinearrelu method)": [[23, "neuromancer.slim.linear.LassoLinearRELU.effective_W"]], "effective_w() (neuromancer.slim.linear.leftstochasticlinear method)": [[23, "neuromancer.slim.linear.LeftStochasticLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.linear method)": [[23, "neuromancer.slim.linear.Linear.effective_W"]], "effective_w() (neuromancer.slim.linear.linearbase method)": [[23, "neuromancer.slim.linear.LinearBase.effective_W"]], "effective_w() (neuromancer.slim.linear.nonnegativelinear method)": [[23, "neuromancer.slim.linear.NonNegativeLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.orthogonallinear method)": [[23, "neuromancer.slim.linear.OrthogonalLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.psdlinear method)": [[23, "neuromancer.slim.linear.PSDLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.perronfrobeniuslinear method)": [[23, "neuromancer.slim.linear.PerronFrobeniusLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.powerboundlinear method)": [[23, "neuromancer.slim.linear.PowerBoundLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.rightstochasticlinear method)": [[23, "neuromancer.slim.linear.RightStochasticLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.svdlinear method)": [[23, "neuromancer.slim.linear.SVDLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.schurdecompositionlinear method)": [[23, "neuromancer.slim.linear.SchurDecompositionLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.skewsymmetriclinear method)": [[23, "neuromancer.slim.linear.SkewSymmetricLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.spectrallinear method)": [[23, "neuromancer.slim.linear.SpectralLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.splitlinear method)": [[23, "neuromancer.slim.linear.SplitLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.squarelinear method)": [[23, "neuromancer.slim.linear.SquareLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.stablesplitlinear method)": [[23, "neuromancer.slim.linear.StableSplitLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.symmetriclinear method)": [[23, "neuromancer.slim.linear.SymmetricLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.symplecticlinear method)": [[23, "neuromancer.slim.linear.SymplecticLinear.effective_W"]], "effective_w() (neuromancer.slim.linear.trivialnullspacelinear method)": [[23, "neuromancer.slim.linear.TrivialNullSpaceLinear.effective_W"]], "eig() (neuromancer.slim.linear.linearbase method)": [[23, "neuromancer.slim.linear.LinearBase.eig"]], "eig_v_estimate() (neuromancer.slim.linear.powerboundlinear method)": [[23, "neuromancer.slim.linear.PowerBoundLinear.eig_v_estimate"]], "forward() (neuromancer.slim.linear.butterflylinear method)": [[23, "neuromancer.slim.linear.ButterflyLinear.forward"]], "forward() (neuromancer.slim.linear.identitygradrelu static method)": [[23, "neuromancer.slim.linear.IdentityGradReLU.forward"]], "forward() (neuromancer.slim.linear.lassolinear method)": [[23, "neuromancer.slim.linear.LassoLinear.forward"]], "forward() (neuromancer.slim.linear.linear method)": [[23, "neuromancer.slim.linear.Linear.forward"]], "forward() (neuromancer.slim.linear.linearbase method)": [[23, "neuromancer.slim.linear.LinearBase.forward"]], "forward() (neuromancer.slim.linear.orthogonallinear method)": [[23, "neuromancer.slim.linear.OrthogonalLinear.forward"]], "forward() (neuromancer.slim.linear.spectrallinear method)": [[23, "neuromancer.slim.linear.SpectralLinear.forward"]], "forward() (neuromancer.slim.rnn.rnn method)": [[23, "neuromancer.slim.rnn.RNN.forward"]], "forward() (neuromancer.slim.rnn.rnncell method)": [[23, "neuromancer.slim.rnn.RNNCell.forward"]], "get_eps() (neuromancer.slim.linear.l0linear method)": [[23, "neuromancer.slim.linear.L0Linear.get_eps"]], "neuromancer.slim": [[23, "module-neuromancer.slim"]], "neuromancer.slim.linear": [[23, "module-neuromancer.slim.linear"]], "neuromancer.slim.rnn": [[23, "module-neuromancer.slim.rnn"]], "orthogonal_error() (neuromancer.slim.linear.svdlinear method)": [[23, "neuromancer.slim.linear.SVDLinear.orthogonal_error"]], "quantile_concrete() (neuromancer.slim.linear.l0linear method)": [[23, "neuromancer.slim.linear.L0Linear.quantile_concrete"]], "reg_error() (neuromancer.slim.linear.boundednormlinear method)": [[23, "neuromancer.slim.linear.BoundedNormLinear.reg_error"]], "reg_error() (neuromancer.slim.linear.l0linear method)": [[23, "neuromancer.slim.linear.L0Linear.reg_error"]], "reg_error() (neuromancer.slim.linear.lassolinear method)": [[23, "neuromancer.slim.linear.LassoLinear.reg_error"]], "reg_error() (neuromancer.slim.linear.lassolinearrelu method)": [[23, "neuromancer.slim.linear.LassoLinearRELU.reg_error"]], "reg_error() (neuromancer.slim.linear.linearbase method)": [[23, "neuromancer.slim.linear.LinearBase.reg_error"]], "reg_error() (neuromancer.slim.linear.powerboundlinear method)": [[23, "neuromancer.slim.linear.PowerBoundLinear.reg_error"]], "reg_error() (neuromancer.slim.linear.svdlinear method)": [[23, "neuromancer.slim.linear.SVDLinear.reg_error"]], "reg_error() (neuromancer.slim.linear.schurdecompositionlinear method)": [[23, "neuromancer.slim.linear.SchurDecompositionLinear.reg_error"]], "reg_error() (neuromancer.slim.rnn.rnn method)": [[23, "neuromancer.slim.rnn.RNN.reg_error"]], "reg_error() (neuromancer.slim.rnn.rnncell method)": [[23, "neuromancer.slim.rnn.RNNCell.reg_error"]], "butterfly (class in neuromancer.slim.butterfly.butterfly)": [[24, "neuromancer.slim.butterfly.butterfly.Butterfly"]], "butterflyfactormult (class in neuromancer.slim.butterfly.butterfly_multiply)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyFactorMult"]], "butterflymult (class in neuromancer.slim.butterfly.butterfly_multiply)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMult"]], "butterflymultinplace (class in neuromancer.slim.butterfly.butterfly_multiply)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMultInplace"]], "butterflymultuntied (class in neuromancer.slim.butterfly.butterfly_multiply)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMultUntied"]], "complexmatmulnp (class in neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.ComplexMatmulNp"]], "complexmul (class in neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.ComplexMul"]], "conjugate (class in neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.Conjugate"]], "fixedpermutation (class in neuromancer.slim.butterfly.permutation)": [[24, "neuromancer.slim.butterfly.permutation.FixedPermutation"]], "permutation (class in neuromancer.slim.butterfly.permutation)": [[24, "neuromancer.slim.butterfly.permutation.Permutation"]], "permutationfactor (class in neuromancer.slim.butterfly.permutation)": [[24, "neuromancer.slim.butterfly.permutation.PermutationFactor"]], "permutationfactorevenoddmult (class in neuromancer.slim.butterfly.permutation_multiply)": [[24, "neuromancer.slim.butterfly.permutation_multiply.PermutationFactorEvenOddMult"]], "permutationfactorreversemult (class in neuromancer.slim.butterfly.permutation_multiply)": [[24, "neuromancer.slim.butterfly.permutation_multiply.PermutationFactorReverseMult"]], "argmax() (neuromancer.slim.butterfly.permutation.permutation method)": [[24, "neuromancer.slim.butterfly.permutation.Permutation.argmax"]], "argmax() (neuromancer.slim.butterfly.permutation.permutationfactor method)": [[24, "neuromancer.slim.butterfly.permutation.PermutationFactor.argmax"]], "backward() (neuromancer.slim.butterfly.butterfly_multiply.butterflyfactormult static method)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyFactorMult.backward"]], "backward() (neuromancer.slim.butterfly.butterfly_multiply.butterflymult static method)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMult.backward"]], "backward() (neuromancer.slim.butterfly.butterfly_multiply.butterflymultinplace static method)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMultInplace.backward"]], "backward() (neuromancer.slim.butterfly.butterfly_multiply.butterflymultuntied static method)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMultUntied.backward"]], "backward() (neuromancer.slim.butterfly.complex_utils.complexmatmulnp static method)": [[24, "neuromancer.slim.butterfly.complex_utils.ComplexMatmulNp.backward"]], "backward() (neuromancer.slim.butterfly.complex_utils.complexmul static method)": [[24, "neuromancer.slim.butterfly.complex_utils.ComplexMul.backward"]], "backward() (neuromancer.slim.butterfly.complex_utils.conjugate static method)": [[24, "neuromancer.slim.butterfly.complex_utils.Conjugate.backward"]], "backward() (neuromancer.slim.butterfly.permutation_multiply.permutationfactorevenoddmult static method)": [[24, "neuromancer.slim.butterfly.permutation_multiply.PermutationFactorEvenOddMult.backward"]], "backward() (neuromancer.slim.butterfly.permutation_multiply.permutationfactorreversemult static method)": [[24, "neuromancer.slim.butterfly.permutation_multiply.PermutationFactorReverseMult.backward"]], "bitreversal_permutation() (in module neuromancer.slim.butterfly.utils)": [[24, "neuromancer.slim.butterfly.utils.bitreversal_permutation"]], "butterfly_mult() (in module neuromancer.slim.butterfly.butterfly_multiply)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.butterfly_mult"]], "butterfly_mult_factors() (in module neuromancer.slim.butterfly.butterfly_multiply)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.butterfly_mult_factors"]], "butterfly_mult_torch() (in module neuromancer.slim.butterfly.butterfly_multiply)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.butterfly_mult_torch"]], "butterfly_mult_untied() (in module neuromancer.slim.butterfly.butterfly_multiply)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.butterfly_mult_untied"]], "butterfly_mult_untied_torch() (in module neuromancer.slim.butterfly.butterfly_multiply)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.butterfly_mult_untied_torch"]], "complex_matmul_torch() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.complex_matmul_torch"]], "complex_mul_numpy() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.complex_mul_numpy"]], "complex_mul_torch() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.complex_mul_torch"]], "conjugate_torch() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.conjugate_torch"]], "cupy2torch() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.cupy2torch"]], "extra_repr() (neuromancer.slim.butterfly.butterfly.butterfly method)": [[24, "neuromancer.slim.butterfly.butterfly.Butterfly.extra_repr"]], "extra_repr() (neuromancer.slim.butterfly.permutation.permutation method)": [[24, "neuromancer.slim.butterfly.permutation.Permutation.extra_repr"]], "extra_repr() (neuromancer.slim.butterfly.permutation.permutationfactor method)": [[24, "neuromancer.slim.butterfly.permutation.PermutationFactor.extra_repr"]], "forward() (neuromancer.slim.butterfly.butterfly.butterfly method)": [[24, "neuromancer.slim.butterfly.butterfly.Butterfly.forward"]], "forward() (neuromancer.slim.butterfly.butterfly_multiply.butterflyfactormult static method)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyFactorMult.forward"]], "forward() (neuromancer.slim.butterfly.butterfly_multiply.butterflymult static method)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMult.forward"]], "forward() (neuromancer.slim.butterfly.butterfly_multiply.butterflymultinplace static method)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMultInplace.forward"]], "forward() (neuromancer.slim.butterfly.butterfly_multiply.butterflymultuntied static method)": [[24, "neuromancer.slim.butterfly.butterfly_multiply.ButterflyMultUntied.forward"]], "forward() (neuromancer.slim.butterfly.complex_utils.complexmatmulnp static method)": [[24, "neuromancer.slim.butterfly.complex_utils.ComplexMatmulNp.forward"]], "forward() (neuromancer.slim.butterfly.complex_utils.complexmul static method)": [[24, "neuromancer.slim.butterfly.complex_utils.ComplexMul.forward"]], "forward() (neuromancer.slim.butterfly.complex_utils.conjugate static method)": [[24, "neuromancer.slim.butterfly.complex_utils.Conjugate.forward"]], "forward() (neuromancer.slim.butterfly.permutation.fixedpermutation method)": [[24, "neuromancer.slim.butterfly.permutation.FixedPermutation.forward"]], "forward() (neuromancer.slim.butterfly.permutation.permutation method)": [[24, "neuromancer.slim.butterfly.permutation.Permutation.forward"]], "forward() (neuromancer.slim.butterfly.permutation.permutationfactor method)": [[24, "neuromancer.slim.butterfly.permutation.PermutationFactor.forward"]], "forward() (neuromancer.slim.butterfly.permutation_multiply.permutationfactorevenoddmult static method)": [[24, "neuromancer.slim.butterfly.permutation_multiply.PermutationFactorEvenOddMult.forward"]], "forward() (neuromancer.slim.butterfly.permutation_multiply.permutationfactorreversemult static method)": [[24, "neuromancer.slim.butterfly.permutation_multiply.PermutationFactorReverseMult.forward"]], "neuromancer.slim.butterfly": [[24, "module-neuromancer.slim.butterfly"]], "neuromancer.slim.butterfly.benchmark": [[24, "module-neuromancer.slim.butterfly.benchmark"]], "neuromancer.slim.butterfly.butterfly": [[24, "module-neuromancer.slim.butterfly.butterfly"]], "neuromancer.slim.butterfly.butterfly_multiply": [[24, "module-neuromancer.slim.butterfly.butterfly_multiply"]], "neuromancer.slim.butterfly.complex_utils": [[24, "module-neuromancer.slim.butterfly.complex_utils"]], "neuromancer.slim.butterfly.permutation": [[24, "module-neuromancer.slim.butterfly.permutation"]], "neuromancer.slim.butterfly.permutation_multiply": [[24, "module-neuromancer.slim.butterfly.permutation_multiply"]], "neuromancer.slim.butterfly.utils": [[24, "module-neuromancer.slim.butterfly.utils"]], "permutation_mult() (in module neuromancer.slim.butterfly.permutation_multiply)": [[24, "neuromancer.slim.butterfly.permutation_multiply.permutation_mult"]], "permutation_mult_factors() (in module neuromancer.slim.butterfly.permutation_multiply)": [[24, "neuromancer.slim.butterfly.permutation_multiply.permutation_mult_factors"]], "permutation_mult_single() (in module neuromancer.slim.butterfly.permutation_multiply)": [[24, "neuromancer.slim.butterfly.permutation_multiply.permutation_mult_single"]], "permutation_mult_single_factor() (in module neuromancer.slim.butterfly.permutation_multiply)": [[24, "neuromancer.slim.butterfly.permutation_multiply.permutation_mult_single_factor"]], "permutation_mult_single_factor_torch() (in module neuromancer.slim.butterfly.permutation_multiply)": [[24, "neuromancer.slim.butterfly.permutation_multiply.permutation_mult_single_factor_torch"]], "permutation_mult_torch() (in module neuromancer.slim.butterfly.permutation_multiply)": [[24, "neuromancer.slim.butterfly.permutation_multiply.permutation_mult_torch"]], "real_to_complex() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.real_to_complex"]], "reset_parameters() (neuromancer.slim.butterfly.butterfly.butterfly method)": [[24, "neuromancer.slim.butterfly.butterfly.Butterfly.reset_parameters"]], "test_complex_mm() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.test_complex_mm"]], "test_complex_mul() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.test_complex_mul"]], "torch2cupy() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.torch2cupy"]], "torch2numpy() (in module neuromancer.slim.butterfly.complex_utils)": [[24, "neuromancer.slim.butterfly.complex_utils.torch2numpy"]], "problem (in module neuromancer)": [[29, "neuromancer.problem"]], "neuromancer.rnn": [[32, "module-neuromancer.rnn"]], "neuromancer.solvers": [[35, "module-neuromancer.solvers"]]}})